package at.notamWebapp.util;

import com.sun.org.apache.xml.internal.utils.DefaultErrorHandler;
import com.vaadin.server.Page;
import com.vaadin.ui.Notification;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Source;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;
import java.io.File;
import java.io.IOException;

/**
 * Created by khoef on 24.07.2017.
 */
public class Validation {
    public static final String SCHEMAFILE = "XSD/Query_XSD/InterestSpecificationSchema.xsd";
    public static Document doc;

    public static void validateXmlFile(String xmlFile) throws Exception {
        // create a factory that understands namespaces and validates the XML input
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);

        try{
            // read the XML file
            DocumentBuilder builder = factory.newDocumentBuilder();
            builder.setErrorHandler(new DefaultErrorHandler());
            doc = builder.parse(new File("tmp/InterestSpecification/" + xmlFile + ".xml"));

            // create a SchemaFactory and a Schema
            SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
            Source schemaFile = new StreamSource(new File(Validation.SCHEMAFILE));
            Schema schema = schemaFactory.newSchema(schemaFile);

            // create a Validator object and validate the XML file
            Validator validator = schema.newValidator();
            validator.validate(new DOMSource(doc));
            new Notification("XML file successfully validated.",
                    Notification.Type.TRAY_NOTIFICATION)
                    .show(Page.getCurrent());
        }
        catch (SAXParseException spe){
            // errror generated by the parser
            String message = "** Parser error! **\n  URI: " + spe.getSystemId() + "\n  Line: " + spe.getLineNumber() + "\n  Message: " + spe.getMessage();
            Exception x = spe;
            if (spe.getException() != null)
                x = spe.getException();
            throw new Exception(message, x);
        }
        catch (SAXException sxe) {
            Exception x = sxe;
            if (sxe.getException() != null)
                x = sxe.getException();
            throw new Exception("Error during parsing.", x);

        }
        catch (ParserConfigurationException pce) {
            throw new Exception("Parser with specified options can't be built.", pce);
        }
        catch (IOException ioe) {
            // I/O error
            throw new Exception("Error reading file.", ioe);
        }
    }

}
