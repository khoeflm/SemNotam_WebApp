<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<bindings xmlns="http://java.sun.com/xml/ns/jaxb" if-exists="true" version="2.1">
  <!--

Diese Datei wurde mit der JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 generiert 
Siehe <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
Ã„nderungen an dieser Datei gehen bei einer Neukompilierung des Quellschemas verloren. 
Generiert: 2016.11.21 um 08:59:48 PM CET 

  -->
  <bindings xmlns:tns="http://semnotam.frequentis.com/schema/1.0" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="com.frequentis.semnotam.schema._1"/>
    </schemaBindings>
    <bindings if-exists="true" scd="tns:SegmentCollection">
      <class ref="com.frequentis.semnotam.schema._1.SegmentCollection"/>
    </bindings>
    <bindings if-exists="true" scd="tns:AerodromeCollection">
      <class ref="com.frequentis.semnotam.schema._1.AerodromeCollection"/>
    </bindings>
    <bindings if-exists="true" scd="tns:FirCollection">
      <class ref="com.frequentis.semnotam.schema._1.FirCollection"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeIntervalPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.TimeIntervalPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeBufferPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.TimeBufferPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ExclusionPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.ExclusionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InterestSpecificationType">
      <class ref="com.frequentis.semnotam.schema._1.InterestSpecificationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InterestSpecificDataPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.InterestSpecificDataPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InterestSpecResultType">
      <class ref="com.frequentis.semnotam.schema._1.InterestSpecResultType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NotamSetMetaInformationPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.NotamSetMetaInformationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MetaInfoType">
      <class ref="com.frequentis.semnotam.schema._1.MetaInfoType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EnrichmentInformationPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.EnrichmentInformationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EnrichmentInformationType">
      <class ref="com.frequentis.semnotam.schema._1.EnrichmentInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EnrichmentPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.EnrichmentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EnrichmentType">
      <class ref="com.frequentis.semnotam.schema._1.EnrichmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AnnotationInformationPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.AnnotationInformationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AnnotationInformationType">
      <class ref="com.frequentis.semnotam.schema._1.AnnotationInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AnnotationPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.AnnotationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AnnotationType">
      <class ref="com.frequentis.semnotam.schema._1.AnnotationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AnnotationGroupingPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.AnnotationGroupingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AnnotationGroupPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.AnnotationGroupPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroupingType">
      <class ref="com.frequentis.semnotam.schema._1.GroupingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroupType">
      <class ref="com.frequentis.semnotam.schema._1.GroupType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FilterInformationPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.FilterInformationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FilterInformationType">
      <class ref="com.frequentis.semnotam.schema._1.FilterInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FilterPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.FilterPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FilterType">
      <class ref="com.frequentis.semnotam.schema._1.FilterType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FilterGroupingPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.FilterGroupingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FilterGroupPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.FilterGroupPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroupingArrangementPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.GroupingArrangementPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroupingArrangementType">
      <class ref="com.frequentis.semnotam.schema._1.GroupingArrangementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroupingArrangementListPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.GroupingArrangementListPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroupingArrangementListType">
      <class ref="com.frequentis.semnotam.schema._1.GroupingArrangementListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrangementGroupingPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.ArrangementGroupingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RankingStrategyPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.RankingStrategyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RankingStrategyType">
      <class ref="com.frequentis.semnotam.schema._1.RankingStrategyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InterestSpecificDataType">
      <class ref="com.frequentis.semnotam.schema._1.InterestSpecificDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InterestPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.InterestPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SimpleInterestPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.SimpleInterestPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ComplexInterestType">
      <class ref="com.frequentis.semnotam.schema._1.ComplexInterestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BinaryInterestType">
      <class ref="com.frequentis.semnotam.schema._1.BinaryInterestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BinaryIntersectionInterestType">
      <class ref="com.frequentis.semnotam.schema._1.BinaryIntersectionInterestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BinaryUnionInterestType">
      <class ref="com.frequentis.semnotam.schema._1.BinaryUnionInterestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ComplementInterestType">
      <class ref="com.frequentis.semnotam.schema._1.ComplementInterestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroupInterestType">
      <class ref="com.frequentis.semnotam.schema._1.GroupInterestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:IntersectionInterestType">
      <class ref="com.frequentis.semnotam.schema._1.IntersectionInterestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnionInterestType">
      <class ref="com.frequentis.semnotam.schema._1.UnionInterestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightPlanInterestType">
      <class ref="com.frequentis.semnotam.schema._1.FlightPlanInterestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightPathInterestType">
      <class ref="com.frequentis.semnotam.schema._1.FlightPathInterestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightPathInterestPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.FlightPathInterestPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SimpleInterestType">
      <class ref="com.frequentis.semnotam.schema._1.SimpleInterestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PeriodOfInterestPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.PeriodOfInterestPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PeriodOfInterestType">
      <class ref="com.frequentis.semnotam.schema._1.PeriodOfInterestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AttributeOfInterestType">
      <class ref="com.frequentis.semnotam.schema._1.AttributeOfInterestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftOfInterestPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.AircraftOfInterestPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftOfInterestType">
      <class ref="com.frequentis.semnotam.schema._1.AircraftOfInterestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AreaOfInterestType">
      <class ref="com.frequentis.semnotam.schema._1.AreaOfInterestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnscopedAreaType">
      <class ref="com.frequentis.semnotam.schema._1.UnscopedAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ShapeAreaType">
      <class ref="com.frequentis.semnotam.schema._1.ShapeAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FirAreaType">
      <class ref="com.frequentis.semnotam.schema._1.FirAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SegmentAreaType">
      <class ref="com.frequentis.semnotam.schema._1.SegmentAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SegmentShapePropertyType">
      <class ref="com.frequentis.semnotam.schema._1.SegmentShapePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SegmentShapeAreaType">
      <class ref="com.frequentis.semnotam.schema._1.SegmentShapeAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ElevatedPointReferencePropertyType">
      <class ref="com.frequentis.semnotam.schema._1.ElevatedPointReferencePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AtsAreaType">
      <class ref="com.frequentis.semnotam.schema._1.AtsAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TransitionAreaType">
      <class ref="com.frequentis.semnotam.schema._1.TransitionAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DepartureAreaType">
      <class ref="com.frequentis.semnotam.schema._1.DepartureAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApproachAreaType">
      <class ref="com.frequentis.semnotam.schema._1.ApproachAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DestinationApproachAreaType">
      <class ref="com.frequentis.semnotam.schema._1.DestinationApproachAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AlternateApproachAreaType">
      <class ref="com.frequentis.semnotam.schema._1.AlternateApproachAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DestinationAlternateApproachAreaType">
      <class ref="com.frequentis.semnotam.schema._1.DestinationAlternateApproachAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EnRouteAlternateApproachAreaType">
      <class ref="com.frequentis.semnotam.schema._1.EnRouteAlternateApproachAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DepartureAlternateApproachAreaType">
      <class ref="com.frequentis.semnotam.schema._1.DepartureAlternateApproachAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ScopedAreaInterestType">
      <class ref="com.frequentis.semnotam.schema._1.ScopedAreaInterestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AreaOfInterestPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.AreaOfInterestPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AerodromeAreaType">
      <class ref="com.frequentis.semnotam.schema._1.AerodromeAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DepartureAerodromeAreaType">
      <class ref="com.frequentis.semnotam.schema._1.DepartureAerodromeAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DestinationAerodromeAreaType">
      <class ref="com.frequentis.semnotam.schema._1.DestinationAerodromeAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AlternateAerodromeAreaType">
      <class ref="com.frequentis.semnotam.schema._1.AlternateAerodromeAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DepartureAlternateAerodromeAreaType">
      <class ref="com.frequentis.semnotam.schema._1.DepartureAlternateAerodromeAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DestinationAlternateAerodromeAreaType">
      <class ref="com.frequentis.semnotam.schema._1.DestinationAlternateAerodromeAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EnRouteAlternateAerodromeAreaType">
      <class ref="com.frequentis.semnotam.schema._1.EnRouteAlternateAerodromeAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ConceptDefinedAreaType">
      <class ref="com.frequentis.semnotam.schema._1.ConceptDefinedAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RestrictionPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.RestrictionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValueRestrictionType">
      <class ref="com.frequentis.semnotam.schema._1.ValueRestrictionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NestedRestrictionType">
      <class ref="com.frequentis.semnotam.schema._1.NestedRestrictionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NotamRestrictionType">
      <class ref="com.frequentis.semnotam.schema._1.NotamRestrictionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpatialBufferPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.SpatialBufferPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpatialBufferType">
      <class ref="com.frequentis.semnotam.schema._1.SpatialBufferType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SegmentType">
      <class ref="com.frequentis.semnotam.schema._1.SegmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AtsSegmentType">
      <class ref="com.frequentis.semnotam.schema._1.AtsSegmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TransitionSegmentType">
      <class ref="com.frequentis.semnotam.schema._1.TransitionSegmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AerodromeType">
      <class ref="com.frequentis.semnotam.schema._1.AerodromeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FirType">
      <class ref="com.frequentis.semnotam.schema._1.FirType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ResultNotamPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.ResultNotamPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ResultType">
      <class ref="com.frequentis.semnotam.schema._1.ResultType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AIXMBasicMessagePropertyType">
      <class ref="com.frequentis.semnotam.schema._1.AIXMBasicMessagePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RankingAssignmentPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.RankingAssignmentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RankingAssignmentType">
      <class ref="com.frequentis.semnotam.schema._1.RankingAssignmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RankingPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.RankingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RankingType">
      <class ref="com.frequentis.semnotam.schema._1.RankingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ClassificationPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.ClassificationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroupAssignmentType">
      <class ref="com.frequentis.semnotam.schema._1.GroupAssignmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroupingPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.GroupingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroupPropertyType">
      <class ref="com.frequentis.semnotam.schema._1.GroupPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ResultGroupType">
      <class ref="com.frequentis.semnotam.schema._1.ResultGroupType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRankingDirectionBaseType">
      <typesafeEnumClass ref="com.frequentis.semnotam.schema._1.CodeRankingDirectionBaseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeTimeOfDayBaseType">
      <typesafeEnumClass ref="com.frequentis.semnotam.schema._1.CodeTimeOfDayBaseType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.aixm.aero/schema/5.1/event" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="aero.aixm.event"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:NOTAMTranslationType">
      <class ref="aero.aixm.event.NOTAMTranslationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AIS_PublicationType">
      <class ref="aero.aixm.event.AISPublicationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NOTAMType">
      <class ref="aero.aixm.event.NOTAMType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EventTimeSliceType">
      <class ref="aero.aixm.event.EventTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EventType">
      <class ref="aero.aixm.event.EventType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayProtectAreaExtensionType">
      <class ref="aero.aixm.event.RunwayProtectAreaExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayDirectionExtensionType">
      <class ref="aero.aixm.event.RunwayDirectionExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayCentrelinePointExtensionType">
      <class ref="aero.aixm.event.RunwayCentrelinePointExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayExtensionType">
      <class ref="aero.aixm.event.RunwayExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrestingGearExtensionType">
      <class ref="aero.aixm.event.ArrestingGearExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayElementExtensionType">
      <class ref="aero.aixm.event.RunwayElementExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VisualGlideSlopeIndicatorExtensionType">
      <class ref="aero.aixm.event.VisualGlideSlopeIndicatorExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayVisualRangeExtensionType">
      <class ref="aero.aixm.event.RunwayVisualRangeExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayBlastPadExtensionType">
      <class ref="aero.aixm.event.RunwayBlastPadExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiHoldingPositionExtensionType">
      <class ref="aero.aixm.event.TaxiHoldingPositionExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayExtensionType">
      <class ref="aero.aixm.event.TaxiwayExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayElementExtensionType">
      <class ref="aero.aixm.event.TaxiwayElementExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GuidanceLineExtensionType">
      <class ref="aero.aixm.event.GuidanceLineExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronExtensionType">
      <class ref="aero.aixm.event.ApronExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronElementExtensionType">
      <class ref="aero.aixm.event.ApronElementExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftStandExtensionType">
      <class ref="aero.aixm.event.AircraftStandExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RoadExtensionType">
      <class ref="aero.aixm.event.RoadExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DeicingAreaExtensionType">
      <class ref="aero.aixm.event.DeicingAreaExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PassengerLoadingBridgeExtensionType">
      <class ref="aero.aixm.event.PassengerLoadingBridgeExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffSafeAreaExtensionType">
      <class ref="aero.aixm.event.TouchDownLiftOffSafeAreaExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffExtensionType">
      <class ref="aero.aixm.event.TouchDownLiftOffExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroundLightSystemExtensionType">
      <class ref="aero.aixm.event.GroundLightSystemExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronLightSystemExtensionType">
      <class ref="aero.aixm.event.ApronLightSystemExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayLightSystemExtensionType">
      <class ref="aero.aixm.event.TaxiwayLightSystemExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayDirectionLightSystemExtensionType">
      <class ref="aero.aixm.event.RunwayDirectionLightSystemExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffLightSystemExtensionType">
      <class ref="aero.aixm.event.TouchDownLiftOffLightSystemExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GuidanceLineLightSystemExtensionType">
      <class ref="aero.aixm.event.GuidanceLineLightSystemExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayProtectAreaLightSystemExtensionType">
      <class ref="aero.aixm.event.RunwayProtectAreaLightSystemExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiHoldingPositionLightSystemExtensionType">
      <class ref="aero.aixm.event.TaxiHoldingPositionLightSystemExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApproachLightingSystemExtensionType">
      <class ref="aero.aixm.event.ApproachLightingSystemExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MarkingExtensionType">
      <class ref="aero.aixm.event.MarkingExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayMarkingExtensionType">
      <class ref="aero.aixm.event.TaxiwayMarkingExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronMarkingExtensionType">
      <class ref="aero.aixm.event.ApronMarkingExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportProtectionAreaMarkingExtensionType">
      <class ref="aero.aixm.event.AirportProtectionAreaMarkingExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffMarkingExtensionType">
      <class ref="aero.aixm.event.TouchDownLiftOffMarkingExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayMarkingExtensionType">
      <class ref="aero.aixm.event.RunwayMarkingExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GuidanceLineMarkingExtensionType">
      <class ref="aero.aixm.event.GuidanceLineMarkingExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DeicingAreaMarkingExtensionType">
      <class ref="aero.aixm.event.DeicingAreaMarkingExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiHoldingPositionMarkingExtensionType">
      <class ref="aero.aixm.event.TaxiHoldingPositionMarkingExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandMarkingExtensionType">
      <class ref="aero.aixm.event.StandMarkingExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FloatingDockSiteExtensionType">
      <class ref="aero.aixm.event.FloatingDockSiteExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MarkingBuoyExtensionType">
      <class ref="aero.aixm.event.MarkingBuoyExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SeaplaneLandingAreaExtensionType">
      <class ref="aero.aixm.event.SeaplaneLandingAreaExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SeaplaneRampSiteExtensionType">
      <class ref="aero.aixm.event.SeaplaneRampSiteExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:WorkAreaExtensionType">
      <class ref="aero.aixm.event.WorkAreaExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurveyControlPointExtensionType">
      <class ref="aero.aixm.event.SurveyControlPointExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NonMovementAreaExtensionType">
      <class ref="aero.aixm.event.NonMovementAreaExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportProtectionAreaExtensionType">
      <class ref="aero.aixm.event.AirportHeliportProtectionAreaExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportCollocationExtensionType">
      <class ref="aero.aixm.event.AirportHeliportCollocationExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportExtensionType">
      <class ref="aero.aixm.event.AirportHeliportExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AltimeterSourceExtensionType">
      <class ref="aero.aixm.event.AltimeterSourceExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHotSpotExtensionType">
      <class ref="aero.aixm.event.AirportHotSpotExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AuthorityForAirspaceExtensionType">
      <class ref="aero.aixm.event.AuthorityForAirspaceExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceExtensionType">
      <class ref="aero.aixm.event.AirspaceExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeoBorderExtensionType">
      <class ref="aero.aixm.event.GeoBorderExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PrecisionApproachRadarExtensionType">
      <class ref="aero.aixm.event.PrecisionApproachRadarExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PrimarySurveillanceRadarExtensionType">
      <class ref="aero.aixm.event.PrimarySurveillanceRadarExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadarEquipmentExtensionType">
      <class ref="aero.aixm.event.RadarEquipmentExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadarSystemExtensionType">
      <class ref="aero.aixm.event.RadarSystemExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SecondarySurveillanceRadarExtensionType">
      <class ref="aero.aixm.event.SecondarySurveillanceRadarExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurveillanceRadarExtensionType">
      <class ref="aero.aixm.event.SurveillanceRadarExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HoldingAssessmentExtensionType">
      <class ref="aero.aixm.event.HoldingAssessmentExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardLevelTableExtensionType">
      <class ref="aero.aixm.event.StandardLevelTableExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardLevelSectorExtensionType">
      <class ref="aero.aixm.event.StandardLevelSectorExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardLevelColumnExtensionType">
      <class ref="aero.aixm.event.StandardLevelColumnExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioFrequencyAreaExtensionType">
      <class ref="aero.aixm.event.RadioFrequencyAreaExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialDateExtensionType">
      <class ref="aero.aixm.event.SpecialDateExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ServiceExtensionType">
      <class ref="aero.aixm.event.ServiceExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioCommunicationChannelExtensionType">
      <class ref="aero.aixm.event.RadioCommunicationChannelExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PilotControlledLightingExtensionType">
      <class ref="aero.aixm.event.PilotControlledLightingExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InformationServiceExtensionType">
      <class ref="aero.aixm.event.InformationServiceExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TrafficSeparationServiceExtensionType">
      <class ref="aero.aixm.event.TrafficSeparationServiceExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroundTrafficControlServiceExtensionType">
      <class ref="aero.aixm.event.GroundTrafficControlServiceExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirTrafficControlServiceExtensionType">
      <class ref="aero.aixm.event.AirTrafficControlServiceExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirTrafficManagementServiceExtensionType">
      <class ref="aero.aixm.event.AirTrafficManagementServiceExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SearchRescueServiceExtensionType">
      <class ref="aero.aixm.event.SearchRescueServiceExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportGroundServiceExtensionType">
      <class ref="aero.aixm.event.AirportGroundServiceExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PassengerServiceExtensionType">
      <class ref="aero.aixm.event.PassengerServiceExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftGroundServiceExtensionType">
      <class ref="aero.aixm.event.AircraftGroundServiceExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FireFightingServiceExtensionType">
      <class ref="aero.aixm.event.FireFightingServiceExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportClearanceServiceExtensionType">
      <class ref="aero.aixm.event.AirportClearanceServiceExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportSuppliesServiceExtensionType">
      <class ref="aero.aixm.event.AirportSuppliesServiceExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AngleIndicationExtensionType">
      <class ref="aero.aixm.event.AngleIndicationExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DistanceIndicationExtensionType">
      <class ref="aero.aixm.event.DistanceIndicationExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AzimuthExtensionType">
      <class ref="aero.aixm.event.AzimuthExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CheckpointINSExtensionType">
      <class ref="aero.aixm.event.CheckpointINSExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CheckpointVORExtensionType">
      <class ref="aero.aixm.event.CheckpointVORExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DMEExtensionType">
      <class ref="aero.aixm.event.DMEExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ElevationExtensionType">
      <class ref="aero.aixm.event.ElevationExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GlidepathExtensionType">
      <class ref="aero.aixm.event.GlidepathExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LocalizerExtensionType">
      <class ref="aero.aixm.event.LocalizerExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MarkerBeaconExtensionType">
      <class ref="aero.aixm.event.MarkerBeaconExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavaidExtensionType">
      <class ref="aero.aixm.event.NavaidExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavaidEquipmentExtensionType">
      <class ref="aero.aixm.event.NavaidEquipmentExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavigationSystemCheckpointExtensionType">
      <class ref="aero.aixm.event.NavigationSystemCheckpointExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SDFExtensionType">
      <class ref="aero.aixm.event.SDFExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NDBExtensionType">
      <class ref="aero.aixm.event.NDBExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialNavigationStationExtensionType">
      <class ref="aero.aixm.event.SpecialNavigationStationExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VORExtensionType">
      <class ref="aero.aixm.event.VORExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TACANExtensionType">
      <class ref="aero.aixm.event.TACANExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialNavigationSystemExtensionType">
      <class ref="aero.aixm.event.SpecialNavigationSystemExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectionFinderExtensionType">
      <class ref="aero.aixm.event.DirectionFinderExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DesignatedPointExtensionType">
      <class ref="aero.aixm.event.DesignatedPointExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SignificantPointInAirspaceExtensionType">
      <class ref="aero.aixm.event.SignificantPointInAirspaceExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AeronauticalGroundLightExtensionType">
      <class ref="aero.aixm.event.AeronauticalGroundLightExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OrganisationAuthorityExtensionType">
      <class ref="aero.aixm.event.OrganisationAuthorityExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnitExtensionType">
      <class ref="aero.aixm.event.UnitExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ObstacleAreaExtensionType">
      <class ref="aero.aixm.event.ObstacleAreaExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalStructureExtensionType">
      <class ref="aero.aixm.event.VerticalStructureExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CirclingAreaExtensionType">
      <class ref="aero.aixm.event.CirclingAreaExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TerminalArrivalAreaExtensionType">
      <class ref="aero.aixm.event.TerminalArrivalAreaExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InstrumentApproachProcedureExtensionType">
      <class ref="aero.aixm.event.InstrumentApproachProcedureExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardInstrumentDepartureExtensionType">
      <class ref="aero.aixm.event.StandardInstrumentDepartureExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavigationAreaExtensionType">
      <class ref="aero.aixm.event.NavigationAreaExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardInstrumentArrivalExtensionType">
      <class ref="aero.aixm.event.StandardInstrumentArrivalExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ProcedureExtensionType">
      <class ref="aero.aixm.event.ProcedureExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavigationAreaRestrictionExtensionType">
      <class ref="aero.aixm.event.NavigationAreaRestrictionExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SegmentLegExtensionType">
      <class ref="aero.aixm.event.SegmentLegExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApproachLegExtensionType">
      <class ref="aero.aixm.event.ApproachLegExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrivalFeederLegExtensionType">
      <class ref="aero.aixm.event.ArrivalFeederLegExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrivalLegExtensionType">
      <class ref="aero.aixm.event.ArrivalLegExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DepartureLegExtensionType">
      <class ref="aero.aixm.event.DepartureLegExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FinalLegExtensionType">
      <class ref="aero.aixm.event.FinalLegExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InitialLegExtensionType">
      <class ref="aero.aixm.event.InitialLegExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:IntermediateLegExtensionType">
      <class ref="aero.aixm.event.IntermediateLegExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MissedApproachLegExtensionType">
      <class ref="aero.aixm.event.MissedApproachLegExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ProcedureDMEExtensionType">
      <class ref="aero.aixm.event.ProcedureDMEExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SafeAltitudeAreaExtensionType">
      <class ref="aero.aixm.event.SafeAltitudeAreaExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HoldingPatternExtensionType">
      <class ref="aero.aixm.event.HoldingPatternExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnplannedHoldingExtensionType">
      <class ref="aero.aixm.event.UnplannedHoldingExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceBorderCrossingExtensionType">
      <class ref="aero.aixm.event.AirspaceBorderCrossingExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightRestrictionExtensionType">
      <class ref="aero.aixm.event.FlightRestrictionExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteSegmentExtensionType">
      <class ref="aero.aixm.event.RouteSegmentExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteDMEExtensionType">
      <class ref="aero.aixm.event.RouteDMEExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteExtensionType">
      <class ref="aero.aixm.event.RouteExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ChangeOverPointExtensionType">
      <class ref="aero.aixm.event.ChangeOverPointExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AerialRefuellingExtensionType">
      <class ref="aero.aixm.event.AerialRefuellingExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RulesProceduresExtensionType">
      <class ref="aero.aixm.event.RulesProceduresExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeNOTAMType">
      <class ref="aero.aixm.event.CodeNOTAMType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeNOTAMTranslationType">
      <class ref="aero.aixm.event.CodeNOTAMTranslationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeEventEncodingType">
      <class ref="aero.aixm.event.CodeEventEncodingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAISPublicationType">
      <class ref="aero.aixm.event.CodeAISPublicationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TextNOTAMType">
      <class ref="aero.aixm.event.TextNOTAMType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EventPropertyType">
      <class ref="aero.aixm.event.EventPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EventTimeSlicePropertyType">
      <class ref="aero.aixm.event.EventTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NOTAMPropertyType">
      <class ref="aero.aixm.event.NOTAMPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AIS_PublicationPropertyType">
      <class ref="aero.aixm.event.AISPublicationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NOTAMTranslationPropertyType">
      <class ref="aero.aixm.event.NOTAMTranslationPropertyType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.aixm.aero/schema/5.1" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="aero.aixm"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:RulesProceduresTimeSliceType">
      <class ref="aero.aixm.RulesProceduresTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AuthorityForAerialRefuellingType">
      <class ref="aero.aixm.AuthorityForAerialRefuellingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AerialRefuellingTrackType">
      <class ref="aero.aixm.AerialRefuellingTrackType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AerialRefuellingAnchorType">
      <class ref="aero.aixm.AerialRefuellingAnchorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AerialRefuellingPointType">
      <class ref="aero.aixm.AerialRefuellingPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AerialRefuellingTimeSliceType">
      <class ref="aero.aixm.AerialRefuellingTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ChangeOverPointTimeSliceType">
      <class ref="aero.aixm.ChangeOverPointTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteTimeSliceType">
      <class ref="aero.aixm.RouteTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteDMETimeSliceType">
      <class ref="aero.aixm.RouteDMETimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RoutePortionType">
      <class ref="aero.aixm.RoutePortionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteAvailabilityType">
      <class ref="aero.aixm.RouteAvailabilityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteSegmentTimeSliceType">
      <class ref="aero.aixm.RouteSegmentTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightConditionElementType">
      <class ref="aero.aixm.FlightConditionElementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightRoutingElementType">
      <class ref="aero.aixm.FlightRoutingElementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightRestrictionRouteType">
      <class ref="aero.aixm.FlightRestrictionRouteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightRestrictionTimeSliceType">
      <class ref="aero.aixm.FlightRestrictionTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightRestrictionLevelType">
      <class ref="aero.aixm.FlightRestrictionLevelType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightConditionCircumstanceType">
      <class ref="aero.aixm.FlightConditionCircumstanceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightConditionCombinationType">
      <class ref="aero.aixm.FlightConditionCombinationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectFlightSegmentType">
      <class ref="aero.aixm.DirectFlightSegmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectFlightClassType">
      <class ref="aero.aixm.DirectFlightClassType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceBorderCrossingTimeSliceType">
      <class ref="aero.aixm.AirspaceBorderCrossingTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HoldingPatternDistanceType">
      <class ref="aero.aixm.HoldingPatternDistanceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HoldingPatternDurationType">
      <class ref="aero.aixm.HoldingPatternDurationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnplannedHoldingTimeSliceType">
      <class ref="aero.aixm.UnplannedHoldingTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HoldingPatternTimeSliceType">
      <class ref="aero.aixm.HoldingPatternTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SafeAltitudeAreaSectorType">
      <class ref="aero.aixm.SafeAltitudeAreaSectorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SafeAltitudeAreaTimeSliceType">
      <class ref="aero.aixm.SafeAltitudeAreaTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ProcedureDMETimeSliceType">
      <class ref="aero.aixm.ProcedureDMETimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LandingTakeoffAreaCollectionType">
      <class ref="aero.aixm.LandingTakeoffAreaCollectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ProcedureTransitionLegType">
      <class ref="aero.aixm.ProcedureTransitionLegType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MissedApproachLegTimeSliceType">
      <class ref="aero.aixm.MissedApproachLegTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:IntermediateLegTimeSliceType">
      <class ref="aero.aixm.IntermediateLegTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InitialLegTimeSliceType">
      <class ref="aero.aixm.InitialLegTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FinalLegTimeSliceType">
      <class ref="aero.aixm.FinalLegTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DepartureLegTimeSliceType">
      <class ref="aero.aixm.DepartureLegTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrivalLegTimeSliceType">
      <class ref="aero.aixm.ArrivalLegTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrivalFeederLegTimeSliceType">
      <class ref="aero.aixm.ArrivalFeederLegTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HoldingUseType">
      <class ref="aero.aixm.HoldingUseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ProcedureTransitionType">
      <class ref="aero.aixm.ProcedureTransitionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavigationAreaRestrictionTimeSliceType">
      <class ref="aero.aixm.NavigationAreaRestrictionTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ProcedureAvailabilityType">
      <class ref="aero.aixm.ProcedureAvailabilityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardInstrumentArrivalTimeSliceType">
      <class ref="aero.aixm.StandardInstrumentArrivalTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SectorDesignType">
      <class ref="aero.aixm.SectorDesignType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DepartureArrivalConditionType">
      <class ref="aero.aixm.DepartureArrivalConditionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavigationAreaSectorType">
      <class ref="aero.aixm.NavigationAreaSectorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavigationAreaTimeSliceType">
      <class ref="aero.aixm.NavigationAreaTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardInstrumentDepartureTimeSliceType">
      <class ref="aero.aixm.StandardInstrumentDepartureTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApproachConditionType">
      <class ref="aero.aixm.ApproachConditionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MissedApproachGroupType">
      <class ref="aero.aixm.MissedApproachGroupType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InstrumentApproachProcedureTimeSliceType">
      <class ref="aero.aixm.InstrumentApproachProcedureTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FinalProfileType">
      <class ref="aero.aixm.FinalProfileType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApproachTimingTableType">
      <class ref="aero.aixm.ApproachTimingTableType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApproachDistanceTableType">
      <class ref="aero.aixm.ApproachDistanceTableType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApproachAltitudeTableType">
      <class ref="aero.aixm.ApproachAltitudeTableType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FASDataBlockType">
      <class ref="aero.aixm.FASDataBlockType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TerminalArrivalAreaTimeSliceType">
      <class ref="aero.aixm.TerminalArrivalAreaTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TerminalArrivalAreaSectorType">
      <class ref="aero.aixm.TerminalArrivalAreaSectorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EquipmentUnavailableAdjustmentColumnType">
      <class ref="aero.aixm.EquipmentUnavailableAdjustmentColumnType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EquipmentUnavailableAdjustmentType">
      <class ref="aero.aixm.EquipmentUnavailableAdjustmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MinimaType">
      <class ref="aero.aixm.MinimaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CirclingAreaTimeSliceType">
      <class ref="aero.aixm.CirclingAreaTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CirclingRestrictionType">
      <class ref="aero.aixm.CirclingRestrictionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalStructureLightingStatusType">
      <class ref="aero.aixm.VerticalStructureLightingStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalStructureTimeSliceType">
      <class ref="aero.aixm.VerticalStructureTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ObstacleAreaTimeSliceType">
      <class ref="aero.aixm.ObstacleAreaTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalStructurePartType">
      <class ref="aero.aixm.VerticalStructurePartType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnitAvailabilityType">
      <class ref="aero.aixm.UnitAvailabilityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnitDependencyType">
      <class ref="aero.aixm.UnitDependencyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnitTimeSliceType">
      <class ref="aero.aixm.UnitTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OrganisationAuthorityAssociationType">
      <class ref="aero.aixm.OrganisationAuthorityAssociationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OrganisationAuthorityTimeSliceType">
      <class ref="aero.aixm.OrganisationAuthorityTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LinguisticNoteType">
      <class ref="aero.aixm.LinguisticNoteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NoteType">
      <class ref="aero.aixm.NoteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AeronauticalGroundLightTimeSliceType">
      <class ref="aero.aixm.AeronauticalGroundLightTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SignificantPointInAirspaceTimeSliceType">
      <class ref="aero.aixm.SignificantPointInAirspaceTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DesignatedPointTimeSliceType">
      <class ref="aero.aixm.DesignatedPointTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectionFinderTimeSliceType">
      <class ref="aero.aixm.DirectionFinderTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialNavigationStationStatusType">
      <class ref="aero.aixm.SpecialNavigationStationStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavaidEquipmentMonitoringType">
      <class ref="aero.aixm.NavaidEquipmentMonitoringType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavaidOperationalStatusType">
      <class ref="aero.aixm.NavaidOperationalStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialNavigationSystemTimeSliceType">
      <class ref="aero.aixm.SpecialNavigationSystemTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TACANTimeSliceType">
      <class ref="aero.aixm.TACANTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VORTimeSliceType">
      <class ref="aero.aixm.VORTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialNavigationStationTimeSliceType">
      <class ref="aero.aixm.SpecialNavigationStationTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NDBTimeSliceType">
      <class ref="aero.aixm.NDBTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SDFTimeSliceType">
      <class ref="aero.aixm.SDFTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavaidComponentType">
      <class ref="aero.aixm.NavaidComponentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavaidTimeSliceType">
      <class ref="aero.aixm.NavaidTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MarkerBeaconTimeSliceType">
      <class ref="aero.aixm.MarkerBeaconTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LocalizerTimeSliceType">
      <class ref="aero.aixm.LocalizerTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GlidepathTimeSliceType">
      <class ref="aero.aixm.GlidepathTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ElevationTimeSliceType">
      <class ref="aero.aixm.ElevationTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DMETimeSliceType">
      <class ref="aero.aixm.DMETimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AuthorityForSpecialNavigationSystemType">
      <class ref="aero.aixm.AuthorityForSpecialNavigationSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CheckpointVORTimeSliceType">
      <class ref="aero.aixm.CheckpointVORTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CheckpointINSTimeSliceType">
      <class ref="aero.aixm.CheckpointINSTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AzimuthTimeSliceType">
      <class ref="aero.aixm.AzimuthTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AuthorityForSpecialNavigationStationType">
      <class ref="aero.aixm.AuthorityForSpecialNavigationStationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AuthorityForNavaidEquipmentType">
      <class ref="aero.aixm.AuthorityForNavaidEquipmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AngleUseType">
      <class ref="aero.aixm.AngleUseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DistanceIndicationTimeSliceType">
      <class ref="aero.aixm.DistanceIndicationTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AngleIndicationTimeSliceType">
      <class ref="aero.aixm.AngleIndicationTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EnRouteSegmentPointType">
      <class ref="aero.aixm.EnRouteSegmentPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TerminalSegmentPointType">
      <class ref="aero.aixm.TerminalSegmentPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PointReferenceType">
      <class ref="aero.aixm.PointReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioCommunicationOperationalStatusType">
      <class ref="aero.aixm.RadioCommunicationOperationalStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ServiceOperationalStatusType">
      <class ref="aero.aixm.ServiceOperationalStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OxygenType">
      <class ref="aero.aixm.OxygenType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OilType">
      <class ref="aero.aixm.OilType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NitrogenType">
      <class ref="aero.aixm.NitrogenType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FuelType">
      <class ref="aero.aixm.FuelType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportSuppliesServiceTimeSliceType">
      <class ref="aero.aixm.AirportSuppliesServiceTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportClearanceServiceTimeSliceType">
      <class ref="aero.aixm.AirportClearanceServiceTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FireFightingServiceTimeSliceType">
      <class ref="aero.aixm.FireFightingServiceTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftGroundServiceTimeSliceType">
      <class ref="aero.aixm.AircraftGroundServiceTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PassengerServiceTimeSliceType">
      <class ref="aero.aixm.PassengerServiceTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SearchRescueServiceTimeSliceType">
      <class ref="aero.aixm.SearchRescueServiceTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirTrafficManagementServiceTimeSliceType">
      <class ref="aero.aixm.AirTrafficManagementServiceTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirTrafficControlServiceTimeSliceType">
      <class ref="aero.aixm.AirTrafficControlServiceTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroundTrafficControlServiceTimeSliceType">
      <class ref="aero.aixm.GroundTrafficControlServiceTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InformationServiceTimeSliceType">
      <class ref="aero.aixm.InformationServiceTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PilotControlledLightingTimeSliceType">
      <class ref="aero.aixm.PilotControlledLightingTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CallsignDetailType">
      <class ref="aero.aixm.CallsignDetailType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioCommunicationChannelTimeSliceType">
      <class ref="aero.aixm.RadioCommunicationChannelTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MeteorologyType">
      <class ref="aero.aixm.MeteorologyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialDateTimeSliceType">
      <class ref="aero.aixm.SpecialDateTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimesheetType">
      <class ref="aero.aixm.TimesheetType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CircleSectorType">
      <class ref="aero.aixm.CircleSectorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceLayerType">
      <class ref="aero.aixm.AirspaceLayerType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LightElementStatusType">
      <class ref="aero.aixm.LightElementStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LightElementType">
      <class ref="aero.aixm.LightElementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightCharacteristicType">
      <class ref="aero.aixm.FlightCharacteristicType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftCharacteristicType">
      <class ref="aero.aixm.AircraftCharacteristicType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TelephoneContactType">
      <class ref="aero.aixm.TelephoneContactType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PostalAddressType">
      <class ref="aero.aixm.PostalAddressType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OnlineContactType">
      <class ref="aero.aixm.OnlineContactType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ContactInformationType">
      <class ref="aero.aixm.ContactInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioFrequencyAreaTimeSliceType">
      <class ref="aero.aixm.RadioFrequencyAreaTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardLevelType">
      <class ref="aero.aixm.StandardLevelType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardLevelColumnTimeSliceType">
      <class ref="aero.aixm.StandardLevelColumnTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardLevelSectorTimeSliceType">
      <class ref="aero.aixm.StandardLevelSectorTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardLevelTableTimeSliceType">
      <class ref="aero.aixm.StandardLevelTableTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ObstaclePlacementType">
      <class ref="aero.aixm.ObstaclePlacementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HoldingAssessmentTimeSliceType">
      <class ref="aero.aixm.HoldingAssessmentTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AltitudeAdjustmentType">
      <class ref="aero.aixm.AltitudeAdjustmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ObstructionType">
      <class ref="aero.aixm.ObstructionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ObstacleAssessmentAreaType">
      <class ref="aero.aixm.ObstacleAssessmentAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurveillanceGroundStationType">
      <class ref="aero.aixm.SurveillanceGroundStationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SecondarySurveillanceRadarTimeSliceType">
      <class ref="aero.aixm.SecondarySurveillanceRadarTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ReflectorType">
      <class ref="aero.aixm.ReflectorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadarSystemTimeSliceType">
      <class ref="aero.aixm.RadarSystemTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadarComponentType">
      <class ref="aero.aixm.RadarComponentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PrimarySurveillanceRadarTimeSliceType">
      <class ref="aero.aixm.PrimarySurveillanceRadarTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PrecisionApproachRadarTimeSliceType">
      <class ref="aero.aixm.PrecisionApproachRadarTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ElevatedSurfaceType">
      <class ref="aero.aixm.ElevatedSurfaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ElevatedPointType">
      <class ref="aero.aixm.ElevatedPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ElevatedCurveType">
      <class ref="aero.aixm.ElevatedCurveType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceVolumeDependencyType">
      <class ref="aero.aixm.AirspaceVolumeDependencyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeoBorderTimeSliceType">
      <class ref="aero.aixm.GeoBorderTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceLayerClassType">
      <class ref="aero.aixm.AirspaceLayerClassType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceActivationType">
      <class ref="aero.aixm.AirspaceActivationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceVolumeType">
      <class ref="aero.aixm.AirspaceVolumeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceGeometryComponentType">
      <class ref="aero.aixm.AirspaceGeometryComponentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceTimeSliceType">
      <class ref="aero.aixm.AirspaceTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AuthorityForAirspaceTimeSliceType">
      <class ref="aero.aixm.AuthorityForAirspaceTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportUsageType">
      <class ref="aero.aixm.AirportHeliportUsageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportAvailabilityType">
      <class ref="aero.aixm.AirportHeliportAvailabilityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ConditionCombinationType">
      <class ref="aero.aixm.ConditionCombinationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:WorkareaActivityType">
      <class ref="aero.aixm.WorkareaActivityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AltimeterSourceStatusType">
      <class ref="aero.aixm.AltimeterSourceStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHotSpotTimeSliceType">
      <class ref="aero.aixm.AirportHotSpotTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportResponsibilityOrganisationType">
      <class ref="aero.aixm.AirportHeliportResponsibilityOrganisationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AltimeterSourceTimeSliceType">
      <class ref="aero.aixm.AltimeterSourceTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportTimeSliceType">
      <class ref="aero.aixm.AirportHeliportTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportCollocationTimeSliceType">
      <class ref="aero.aixm.AirportHeliportCollocationTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CityType">
      <class ref="aero.aixm.CityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NonMovementAreaTimeSliceType">
      <class ref="aero.aixm.NonMovementAreaTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurfaceCharacteristicsType">
      <class ref="aero.aixm.SurfaceCharacteristicsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurveyControlPointTimeSliceType">
      <class ref="aero.aixm.SurveyControlPointTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:WorkAreaTimeSliceType">
      <class ref="aero.aixm.WorkAreaTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SeaplaneRampSiteTimeSliceType">
      <class ref="aero.aixm.SeaplaneRampSiteTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SeaplaneLandingAreaTimeSliceType">
      <class ref="aero.aixm.SeaplaneLandingAreaTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MarkingBuoyTimeSliceType">
      <class ref="aero.aixm.MarkingBuoyTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FloatingDockSiteTimeSliceType">
      <class ref="aero.aixm.FloatingDockSiteTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportContaminationType">
      <class ref="aero.aixm.AirportHeliportContaminationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftStandContaminationType">
      <class ref="aero.aixm.AircraftStandContaminationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronContaminationType">
      <class ref="aero.aixm.ApronContaminationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffContaminationType">
      <class ref="aero.aixm.TouchDownLiftOffContaminationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwaySectionContaminationType">
      <class ref="aero.aixm.RunwaySectionContaminationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurfaceContaminationLayerType">
      <class ref="aero.aixm.SurfaceContaminationLayerType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayContaminationType">
      <class ref="aero.aixm.TaxiwayContaminationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayContaminationType">
      <class ref="aero.aixm.RunwayContaminationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RidgeType">
      <class ref="aero.aixm.RidgeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandMarkingTimeSliceType">
      <class ref="aero.aixm.StandMarkingTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiHoldingPositionMarkingTimeSliceType">
      <class ref="aero.aixm.TaxiHoldingPositionMarkingTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DeicingAreaMarkingTimeSliceType">
      <class ref="aero.aixm.DeicingAreaMarkingTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GuidanceLineMarkingTimeSliceType">
      <class ref="aero.aixm.GuidanceLineMarkingTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayMarkingTimeSliceType">
      <class ref="aero.aixm.RunwayMarkingTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffMarkingTimeSliceType">
      <class ref="aero.aixm.TouchDownLiftOffMarkingTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportProtectionAreaMarkingTimeSliceType">
      <class ref="aero.aixm.AirportProtectionAreaMarkingTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronMarkingTimeSliceType">
      <class ref="aero.aixm.ApronMarkingTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayMarkingTimeSliceType">
      <class ref="aero.aixm.TaxiwayMarkingTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MarkingElementType">
      <class ref="aero.aixm.MarkingElementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApproachLightingSystemTimeSliceType">
      <class ref="aero.aixm.ApproachLightingSystemTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroundLightingAvailabilityType">
      <class ref="aero.aixm.GroundLightingAvailabilityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LightActivationType">
      <class ref="aero.aixm.LightActivationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiHoldingPositionLightSystemTimeSliceType">
      <class ref="aero.aixm.TaxiHoldingPositionLightSystemTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayProtectAreaLightSystemTimeSliceType">
      <class ref="aero.aixm.RunwayProtectAreaLightSystemTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GuidanceLineLightSystemTimeSliceType">
      <class ref="aero.aixm.GuidanceLineLightSystemTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffLightSystemTimeSliceType">
      <class ref="aero.aixm.TouchDownLiftOffLightSystemTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayDirectionLightSystemTimeSliceType">
      <class ref="aero.aixm.RunwayDirectionLightSystemTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayLightSystemTimeSliceType">
      <class ref="aero.aixm.TaxiwayLightSystemTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronLightSystemTimeSliceType">
      <class ref="aero.aixm.ApronLightSystemTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffTimeSliceType">
      <class ref="aero.aixm.TouchDownLiftOffTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffSafeAreaTimeSliceType">
      <class ref="aero.aixm.TouchDownLiftOffSafeAreaTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PassengerLoadingBridgeTimeSliceType">
      <class ref="aero.aixm.PassengerLoadingBridgeTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DeicingAreaTimeSliceType">
      <class ref="aero.aixm.DeicingAreaTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronAreaUsageType">
      <class ref="aero.aixm.ApronAreaUsageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronAreaAvailabilityType">
      <class ref="aero.aixm.ApronAreaAvailabilityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RoadTimeSliceType">
      <class ref="aero.aixm.RoadTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftStandTimeSliceType">
      <class ref="aero.aixm.AircraftStandTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronElementTimeSliceType">
      <class ref="aero.aixm.ApronElementTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronTimeSliceType">
      <class ref="aero.aixm.ApronTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GuidanceLineTimeSliceType">
      <class ref="aero.aixm.GuidanceLineTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayElementTimeSliceType">
      <class ref="aero.aixm.TaxiwayElementTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayTimeSliceType">
      <class ref="aero.aixm.TaxiwayTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiHoldingPositionTimeSliceType">
      <class ref="aero.aixm.TaxiHoldingPositionTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ManoeuvringAreaUsageType">
      <class ref="aero.aixm.ManoeuvringAreaUsageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ManoeuvringAreaAvailabilityType">
      <class ref="aero.aixm.ManoeuvringAreaAvailabilityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayDeclaredDistanceValueType">
      <class ref="aero.aixm.RunwayDeclaredDistanceValueType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayDeclaredDistanceType">
      <class ref="aero.aixm.RunwayDeclaredDistanceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavaidEquipmentDistanceType">
      <class ref="aero.aixm.NavaidEquipmentDistanceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayBlastPadTimeSliceType">
      <class ref="aero.aixm.RunwayBlastPadTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayVisualRangeTimeSliceType">
      <class ref="aero.aixm.RunwayVisualRangeTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VisualGlideSlopeIndicatorTimeSliceType">
      <class ref="aero.aixm.VisualGlideSlopeIndicatorTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayElementTimeSliceType">
      <class ref="aero.aixm.RunwayElementTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrestingGearTimeSliceType">
      <class ref="aero.aixm.ArrestingGearTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayTimeSliceType">
      <class ref="aero.aixm.RunwayTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayCentrelinePointTimeSliceType">
      <class ref="aero.aixm.RunwayCentrelinePointTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayDirectionTimeSliceType">
      <class ref="aero.aixm.RunwayDirectionTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayProtectAreaTimeSliceType">
      <class ref="aero.aixm.RunwayProtectAreaTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractAIXMFeatureType">
      <class ref="aero.aixm.AbstractAIXMFeatureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractAIXMObjectType">
      <class ref="aero.aixm.AbstractAIXMObjectType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractExtensionType">
      <class ref="aero.aixm.AbstractExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayProtectAreaType">
      <class ref="aero.aixm.RunwayProtectAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractAirportHeliportProtectionAreaType">
      <class ref="aero.aixm.AbstractAirportHeliportProtectionAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayDirectionType">
      <class ref="aero.aixm.RunwayDirectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayCentrelinePointType">
      <class ref="aero.aixm.RunwayCentrelinePointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayType">
      <class ref="aero.aixm.RunwayType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrestingGearType">
      <class ref="aero.aixm.ArrestingGearType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayElementType">
      <class ref="aero.aixm.RunwayElementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VisualGlideSlopeIndicatorType">
      <class ref="aero.aixm.VisualGlideSlopeIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractGroundLightSystemType">
      <class ref="aero.aixm.AbstractGroundLightSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayVisualRangeType">
      <class ref="aero.aixm.RunwayVisualRangeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayBlastPadType">
      <class ref="aero.aixm.RunwayBlastPadType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractPropertiesWithScheduleType">
      <class ref="aero.aixm.AbstractPropertiesWithScheduleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractUsageConditionType">
      <class ref="aero.aixm.AbstractUsageConditionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiHoldingPositionType">
      <class ref="aero.aixm.TaxiHoldingPositionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayType">
      <class ref="aero.aixm.TaxiwayType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayElementType">
      <class ref="aero.aixm.TaxiwayElementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GuidanceLineType">
      <class ref="aero.aixm.GuidanceLineType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronType">
      <class ref="aero.aixm.ApronType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronElementType">
      <class ref="aero.aixm.ApronElementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftStandType">
      <class ref="aero.aixm.AircraftStandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RoadType">
      <class ref="aero.aixm.RoadType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DeicingAreaType">
      <class ref="aero.aixm.DeicingAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PassengerLoadingBridgeType">
      <class ref="aero.aixm.PassengerLoadingBridgeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffSafeAreaType">
      <class ref="aero.aixm.TouchDownLiftOffSafeAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffType">
      <class ref="aero.aixm.TouchDownLiftOffType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronLightSystemType">
      <class ref="aero.aixm.ApronLightSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayLightSystemType">
      <class ref="aero.aixm.TaxiwayLightSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayDirectionLightSystemType">
      <class ref="aero.aixm.RunwayDirectionLightSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffLightSystemType">
      <class ref="aero.aixm.TouchDownLiftOffLightSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GuidanceLineLightSystemType">
      <class ref="aero.aixm.GuidanceLineLightSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayProtectAreaLightSystemType">
      <class ref="aero.aixm.RunwayProtectAreaLightSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiHoldingPositionLightSystemType">
      <class ref="aero.aixm.TaxiHoldingPositionLightSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApproachLightingSystemType">
      <class ref="aero.aixm.ApproachLightingSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractMarkingType">
      <class ref="aero.aixm.AbstractMarkingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayMarkingType">
      <class ref="aero.aixm.TaxiwayMarkingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronMarkingType">
      <class ref="aero.aixm.ApronMarkingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportProtectionAreaMarkingType">
      <class ref="aero.aixm.AirportProtectionAreaMarkingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffMarkingType">
      <class ref="aero.aixm.TouchDownLiftOffMarkingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayMarkingType">
      <class ref="aero.aixm.RunwayMarkingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GuidanceLineMarkingType">
      <class ref="aero.aixm.GuidanceLineMarkingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DeicingAreaMarkingType">
      <class ref="aero.aixm.DeicingAreaMarkingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiHoldingPositionMarkingType">
      <class ref="aero.aixm.TaxiHoldingPositionMarkingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandMarkingType">
      <class ref="aero.aixm.StandMarkingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractSurfaceContaminationType">
      <class ref="aero.aixm.AbstractSurfaceContaminationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FloatingDockSiteType">
      <class ref="aero.aixm.FloatingDockSiteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MarkingBuoyType">
      <class ref="aero.aixm.MarkingBuoyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SeaplaneLandingAreaType">
      <class ref="aero.aixm.SeaplaneLandingAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SeaplaneRampSiteType">
      <class ref="aero.aixm.SeaplaneRampSiteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:WorkAreaType">
      <class ref="aero.aixm.WorkAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurveyControlPointType">
      <class ref="aero.aixm.SurveyControlPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NonMovementAreaType">
      <class ref="aero.aixm.NonMovementAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportCollocationType">
      <class ref="aero.aixm.AirportHeliportCollocationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportType">
      <class ref="aero.aixm.AirportHeliportType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AltimeterSourceType">
      <class ref="aero.aixm.AltimeterSourceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHotSpotType">
      <class ref="aero.aixm.AirportHotSpotType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AuthorityForAirspaceType">
      <class ref="aero.aixm.AuthorityForAirspaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceType">
      <class ref="aero.aixm.AirspaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeoBorderType">
      <class ref="aero.aixm.GeoBorderType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CurveType">
      <class ref="aero.aixm.CurveType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PointType">
      <class ref="aero.aixm.PointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurfaceType">
      <class ref="aero.aixm.SurfaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PrecisionApproachRadarType">
      <class ref="aero.aixm.PrecisionApproachRadarType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractRadarEquipmentType">
      <class ref="aero.aixm.AbstractRadarEquipmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PrimarySurveillanceRadarType">
      <class ref="aero.aixm.PrimarySurveillanceRadarType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractSurveillanceRadarType">
      <class ref="aero.aixm.AbstractSurveillanceRadarType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadarSystemType">
      <class ref="aero.aixm.RadarSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SecondarySurveillanceRadarType">
      <class ref="aero.aixm.SecondarySurveillanceRadarType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HoldingAssessmentType">
      <class ref="aero.aixm.HoldingAssessmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardLevelTableType">
      <class ref="aero.aixm.StandardLevelTableType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardLevelSectorType">
      <class ref="aero.aixm.StandardLevelSectorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardLevelColumnType">
      <class ref="aero.aixm.StandardLevelColumnType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioFrequencyAreaType">
      <class ref="aero.aixm.RadioFrequencyAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialDateType">
      <class ref="aero.aixm.SpecialDateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractServiceType">
      <class ref="aero.aixm.AbstractServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioCommunicationChannelType">
      <class ref="aero.aixm.RadioCommunicationChannelType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PilotControlledLightingType">
      <class ref="aero.aixm.PilotControlledLightingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InformationServiceType">
      <class ref="aero.aixm.InformationServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractTrafficSeparationServiceType">
      <class ref="aero.aixm.AbstractTrafficSeparationServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroundTrafficControlServiceType">
      <class ref="aero.aixm.GroundTrafficControlServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirTrafficControlServiceType">
      <class ref="aero.aixm.AirTrafficControlServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirTrafficManagementServiceType">
      <class ref="aero.aixm.AirTrafficManagementServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SearchRescueServiceType">
      <class ref="aero.aixm.SearchRescueServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractAirportGroundServiceType">
      <class ref="aero.aixm.AbstractAirportGroundServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PassengerServiceType">
      <class ref="aero.aixm.PassengerServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftGroundServiceType">
      <class ref="aero.aixm.AircraftGroundServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FireFightingServiceType">
      <class ref="aero.aixm.FireFightingServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportClearanceServiceType">
      <class ref="aero.aixm.AirportClearanceServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportSuppliesServiceType">
      <class ref="aero.aixm.AirportSuppliesServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractSegmentPointType">
      <class ref="aero.aixm.AbstractSegmentPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AngleIndicationType">
      <class ref="aero.aixm.AngleIndicationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DistanceIndicationType">
      <class ref="aero.aixm.DistanceIndicationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AzimuthType">
      <class ref="aero.aixm.AzimuthType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractNavaidEquipmentType">
      <class ref="aero.aixm.AbstractNavaidEquipmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CheckpointINSType">
      <class ref="aero.aixm.CheckpointINSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractNavigationSystemCheckpointType">
      <class ref="aero.aixm.AbstractNavigationSystemCheckpointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CheckpointVORType">
      <class ref="aero.aixm.CheckpointVORType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DMEType">
      <class ref="aero.aixm.DMEType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ElevationType">
      <class ref="aero.aixm.ElevationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GlidepathType">
      <class ref="aero.aixm.GlidepathType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LocalizerType">
      <class ref="aero.aixm.LocalizerType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MarkerBeaconType">
      <class ref="aero.aixm.MarkerBeaconType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavaidType">
      <class ref="aero.aixm.NavaidType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SDFType">
      <class ref="aero.aixm.SDFType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NDBType">
      <class ref="aero.aixm.NDBType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialNavigationStationType">
      <class ref="aero.aixm.SpecialNavigationStationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VORType">
      <class ref="aero.aixm.VORType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TACANType">
      <class ref="aero.aixm.TACANType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialNavigationSystemType">
      <class ref="aero.aixm.SpecialNavigationSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectionFinderType">
      <class ref="aero.aixm.DirectionFinderType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DesignatedPointType">
      <class ref="aero.aixm.DesignatedPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SignificantPointInAirspaceType">
      <class ref="aero.aixm.SignificantPointInAirspaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AeronauticalGroundLightType">
      <class ref="aero.aixm.AeronauticalGroundLightType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OrganisationAuthorityType">
      <class ref="aero.aixm.OrganisationAuthorityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnitType">
      <class ref="aero.aixm.UnitType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ObstacleAreaType">
      <class ref="aero.aixm.ObstacleAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalStructureType">
      <class ref="aero.aixm.VerticalStructureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CirclingAreaType">
      <class ref="aero.aixm.CirclingAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TerminalArrivalAreaType">
      <class ref="aero.aixm.TerminalArrivalAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InstrumentApproachProcedureType">
      <class ref="aero.aixm.InstrumentApproachProcedureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractProcedureType">
      <class ref="aero.aixm.AbstractProcedureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardInstrumentDepartureType">
      <class ref="aero.aixm.StandardInstrumentDepartureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavigationAreaType">
      <class ref="aero.aixm.NavigationAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardInstrumentArrivalType">
      <class ref="aero.aixm.StandardInstrumentArrivalType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavigationAreaRestrictionType">
      <class ref="aero.aixm.NavigationAreaRestrictionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractSegmentLegType">
      <class ref="aero.aixm.AbstractSegmentLegType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractApproachLegType">
      <class ref="aero.aixm.AbstractApproachLegType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrivalFeederLegType">
      <class ref="aero.aixm.ArrivalFeederLegType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrivalLegType">
      <class ref="aero.aixm.ArrivalLegType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DepartureLegType">
      <class ref="aero.aixm.DepartureLegType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FinalLegType">
      <class ref="aero.aixm.FinalLegType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InitialLegType">
      <class ref="aero.aixm.InitialLegType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:IntermediateLegType">
      <class ref="aero.aixm.IntermediateLegType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MissedApproachLegType">
      <class ref="aero.aixm.MissedApproachLegType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ProcedureDMEType">
      <class ref="aero.aixm.ProcedureDMEType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SafeAltitudeAreaType">
      <class ref="aero.aixm.SafeAltitudeAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HoldingPatternType">
      <class ref="aero.aixm.HoldingPatternType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnplannedHoldingType">
      <class ref="aero.aixm.UnplannedHoldingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceBorderCrossingType">
      <class ref="aero.aixm.AirspaceBorderCrossingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractDirectFlightType">
      <class ref="aero.aixm.AbstractDirectFlightType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightRestrictionType">
      <class ref="aero.aixm.FlightRestrictionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteSegmentType">
      <class ref="aero.aixm.RouteSegmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteDMEType">
      <class ref="aero.aixm.RouteDMEType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteType">
      <class ref="aero.aixm.RouteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ChangeOverPointType">
      <class ref="aero.aixm.ChangeOverPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AerialRefuellingType">
      <class ref="aero.aixm.AerialRefuellingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RulesProceduresType">
      <class ref="aero.aixm.RulesProceduresType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:XHTMLType">
      <class ref="aero.aixm.XHTMLType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAircraftEngineNumberType">
      <class ref="aero.aixm.CodeAircraftEngineNumberType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAirspaceActivityType">
      <class ref="aero.aixm.CodeAirspaceActivityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAircraftCategoryType">
      <class ref="aero.aixm.CodeAircraftCategoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeFireFightingType">
      <class ref="aero.aixm.CodeFireFightingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeFuelType">
      <class ref="aero.aixm.CodeFuelType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeOilType">
      <class ref="aero.aixm.CodeOilType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeDMEChannelType">
      <class ref="aero.aixm.CodeDMEChannelType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeMLSChannelType">
      <class ref="aero.aixm.CodeMLSChannelType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeTACANChannelType">
      <class ref="aero.aixm.CodeTACANChannelType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeHelicopterPerformanceType">
      <class ref="aero.aixm.CodeHelicopterPerformanceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeMarkerBeaconSignalType">
      <class ref="aero.aixm.CodeMarkerBeaconSignalType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeNDBUsageType">
      <class ref="aero.aixm.CodeNDBUsageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeColourType">
      <class ref="aero.aixm.CodeColourType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeTimeEventCombinationType">
      <class ref="aero.aixm.CodeTimeEventCombinationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeComparisonType">
      <class ref="aero.aixm.CodeComparisonType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeSurfaceCompositionType">
      <class ref="aero.aixm.CodeSurfaceCompositionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeSurfaceConditionType">
      <class ref="aero.aixm.CodeSurfaceConditionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeDayType">
      <class ref="aero.aixm.CodeDayType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAltitudeUseType">
      <class ref="aero.aixm.CodeAltitudeUseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeDirectionType">
      <class ref="aero.aixm.CodeDirectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeDirectionReferenceType">
      <class ref="aero.aixm.CodeDirectionReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeDirectionTurnType">
      <class ref="aero.aixm.CodeDirectionTurnType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeVerticalReferenceType">
      <class ref="aero.aixm.CodeVerticalReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRadioEmissionType">
      <class ref="aero.aixm.CodeRadioEmissionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeFlowConditionOperationType">
      <class ref="aero.aixm.CodeFlowConditionOperationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeFlightStatusType">
      <class ref="aero.aixm.CodeFlightStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeFlightType">
      <class ref="aero.aixm.CodeFlightType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeProcedureFixRoleType">
      <class ref="aero.aixm.CodeProcedureFixRoleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAircraftICAOType">
      <class ref="aero.aixm.CodeAircraftICAOType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAirportHeliportDesignatorType">
      <class ref="aero.aixm.CodeAirportHeliportDesignatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAirspaceDesignatorType">
      <class ref="aero.aixm.CodeAirspaceDesignatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeSpecialNavigationChainDesignatorType">
      <class ref="aero.aixm.CodeSpecialNavigationChainDesignatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeDesignatedPointDesignatorType">
      <class ref="aero.aixm.CodeDesignatedPointDesignatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeLevelTableDesignatorType">
      <class ref="aero.aixm.CodeLevelTableDesignatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeNavaidDesignatorType">
      <class ref="aero.aixm.CodeNavaidDesignatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeOrganisationDesignatorType">
      <class ref="aero.aixm.CodeOrganisationDesignatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeFlightRestrictionDesignatorType">
      <class ref="aero.aixm.CodeFlightRestrictionDesignatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRouteOriginType">
      <class ref="aero.aixm.CodeRouteOriginType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeLightIntensityType">
      <class ref="aero.aixm.CodeLightIntensityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeLanguageType">
      <class ref="aero.aixm.CodeLanguageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeIATAType">
      <class ref="aero.aixm.CodeIATAType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeICAOType">
      <class ref="aero.aixm.CodeICAOType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAviationStandardsType">
      <class ref="aero.aixm.CodeAviationStandardsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeLevelType">
      <class ref="aero.aixm.CodeLevelType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeMilitaryStatusType">
      <class ref="aero.aixm.CodeMilitaryStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAirspaceAggregationType">
      <class ref="aero.aixm.CodeAirspaceAggregationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeFlightOriginType">
      <class ref="aero.aixm.CodeFlightOriginType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodePCNMethodType">
      <class ref="aero.aixm.CodePCNMethodType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodePCNTyrePressureType">
      <class ref="aero.aixm.CodePCNTyrePressureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodePCNSubgradeType">
      <class ref="aero.aixm.CodePCNSubgradeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodePCNPavementType">
      <class ref="aero.aixm.CodePCNPavementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeProcedurePhaseType">
      <class ref="aero.aixm.CodeProcedurePhaseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeSurfacePreparationType">
      <class ref="aero.aixm.CodeSurfacePreparationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeApronSectionType">
      <class ref="aero.aixm.CodeApronSectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodePositionInILSType">
      <class ref="aero.aixm.CodePositionInILSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeSideType">
      <class ref="aero.aixm.CodeSideType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRunwaySectionType">
      <class ref="aero.aixm.CodeRunwaySectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeTLOFSectionType">
      <class ref="aero.aixm.CodeTLOFSectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeTaxiwaySectionType">
      <class ref="aero.aixm.CodeTaxiwaySectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeFlightPurposeType">
      <class ref="aero.aixm.CodeFlightPurposeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeLocationQualifierType">
      <class ref="aero.aixm.CodeLocationQualifierType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeATCReportingType">
      <class ref="aero.aixm.CodeATCReportingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRNPType">
      <class ref="aero.aixm.CodeRNPType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRouteAvailabilityType">
      <class ref="aero.aixm.CodeRouteAvailabilityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRVSMPointRoleType">
      <class ref="aero.aixm.CodeRVSMPointRoleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeSpecialDateType">
      <class ref="aero.aixm.CodeSpecialDateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeSpeedReferenceType">
      <class ref="aero.aixm.CodeSpeedReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeTimeEventType">
      <class ref="aero.aixm.CodeTimeEventType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeTimeReferenceType">
      <class ref="aero.aixm.CodeTimeReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAircraftType">
      <class ref="aero.aixm.CodeAircraftType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAircraftEngineType">
      <class ref="aero.aixm.CodeAircraftEngineType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAirportHeliportType">
      <class ref="aero.aixm.CodeAirportHeliportType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAirportHeliportCollocationType">
      <class ref="aero.aixm.CodeAirportHeliportCollocationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeGroundLightingType">
      <class ref="aero.aixm.CodeGroundLightingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeApproachLightingType">
      <class ref="aero.aixm.CodeApproachLightingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeBearingType">
      <class ref="aero.aixm.CodeBearingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAirspaceType">
      <class ref="aero.aixm.CodeAirspaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAuthorityType">
      <class ref="aero.aixm.CodeAuthorityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAirspacePointRoleType">
      <class ref="aero.aixm.CodeAirspacePointRoleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeOrganisationHierarchyType">
      <class ref="aero.aixm.CodeOrganisationHierarchyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeMLSAzimuthType">
      <class ref="aero.aixm.CodeMLSAzimuthType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeCourseType">
      <class ref="aero.aixm.CodeCourseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeDeclaredDistanceType">
      <class ref="aero.aixm.CodeDeclaredDistanceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeDesignatedPointType">
      <class ref="aero.aixm.CodeDesignatedPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeDMEType">
      <class ref="aero.aixm.CodeDMEType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeFlightRuleType">
      <class ref="aero.aixm.CodeFlightRuleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeGeoBorderType">
      <class ref="aero.aixm.CodeGeoBorderType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeHoldingUsageType">
      <class ref="aero.aixm.CodeHoldingUsageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeLightSourceType">
      <class ref="aero.aixm.CodeLightSourceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeMilitaryOperationsType">
      <class ref="aero.aixm.CodeMilitaryOperationsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRadioFrequencyAreaType">
      <class ref="aero.aixm.CodeRadioFrequencyAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeNitrogenType">
      <class ref="aero.aixm.CodeNitrogenType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeNorthReferenceType">
      <class ref="aero.aixm.CodeNorthReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeOrganisationType">
      <class ref="aero.aixm.CodeOrganisationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeOxygenType">
      <class ref="aero.aixm.CodeOxygenType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeSegmentPathType">
      <class ref="aero.aixm.CodeSegmentPathType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRunwayProtectionAreaType">
      <class ref="aero.aixm.CodeRunwayProtectionAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeFlightRestrictionType">
      <class ref="aero.aixm.CodeFlightRestrictionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRouteNavigationType">
      <class ref="aero.aixm.CodeRouteNavigationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRouteSegmentPathType">
      <class ref="aero.aixm.CodeRouteSegmentPathType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAircraftGroundServiceType">
      <class ref="aero.aixm.CodeAircraftGroundServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeSpecialNavigationStationType">
      <class ref="aero.aixm.CodeSpecialNavigationStationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeSpecialNavigationSystemType">
      <class ref="aero.aixm.CodeSpecialNavigationSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAircraftStandType">
      <class ref="aero.aixm.CodeAircraftStandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeTaxiwayType">
      <class ref="aero.aixm.CodeTaxiwayType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeUnitType">
      <class ref="aero.aixm.CodeUnitType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeILSBackCourseType">
      <class ref="aero.aixm.CodeILSBackCourseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeVASISType">
      <class ref="aero.aixm.CodeVASISType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeUsageLimitationType">
      <class ref="aero.aixm.CodeUsageLimitationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeYesNoType">
      <class ref="aero.aixm.CodeYesNoType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DateMonthDayType">
      <class ref="aero.aixm.DateMonthDayType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DateYearType">
      <class ref="aero.aixm.DateYearType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NoNumberType">
      <class ref="aero.aixm.NoNumberType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NoSequenceType">
      <class ref="aero.aixm.NoSequenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeType">
      <class ref="aero.aixm.TimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TextAddressType">
      <class ref="aero.aixm.TextAddressType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TextInstructionType">
      <class ref="aero.aixm.TextInstructionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TextDesignatorType">
      <class ref="aero.aixm.TextDesignatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TextSIDSTARDesignatorType">
      <class ref="aero.aixm.TextSIDSTARDesignatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TextNameType">
      <class ref="aero.aixm.TextNameType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TextRemarkType">
      <class ref="aero.aixm.TextRemarkType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValAngleType">
      <class ref="aero.aixm.ValAngleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValBearingType">
      <class ref="aero.aixm.ValBearingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValMagneticVariationType">
      <class ref="aero.aixm.ValMagneticVariationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValMagneticVariationChangeType">
      <class ref="aero.aixm.ValMagneticVariationChangeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValDistanceType">
      <class ref="aero.aixm.ValDistanceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValDistanceVerticalType">
      <class ref="aero.aixm.ValDistanceVerticalType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValDurationType">
      <class ref="aero.aixm.ValDurationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValFLType">
      <class ref="aero.aixm.ValFLType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValFrequencyType">
      <class ref="aero.aixm.ValFrequencyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValHexType">
      <class ref="aero.aixm.ValHexType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValLCNType">
      <class ref="aero.aixm.ValLCNType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValPCNType">
      <class ref="aero.aixm.ValPCNType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValPressureType">
      <class ref="aero.aixm.ValPressureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValSlopeType">
      <class ref="aero.aixm.ValSlopeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValSpeedType">
      <class ref="aero.aixm.ValSpeedType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValTemperatureType">
      <class ref="aero.aixm.ValTemperatureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValWeightType">
      <class ref="aero.aixm.ValWeightType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeStatusConstructionType">
      <class ref="aero.aixm.CodeStatusConstructionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeStatusOperationsType">
      <class ref="aero.aixm.CodeStatusOperationsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeVerticalStructureType">
      <class ref="aero.aixm.CodeVerticalStructureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeVerticalStructureMarkingType">
      <class ref="aero.aixm.CodeVerticalStructureMarkingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeCardinalDirectionType">
      <class ref="aero.aixm.CodeCardinalDirectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeFreeFlightType">
      <class ref="aero.aixm.CodeFreeFlightType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeNavaidServiceType">
      <class ref="aero.aixm.CodeNavaidServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeVerticalDatumType">
      <class ref="aero.aixm.CodeVerticalDatumType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValDistanceSignedType">
      <class ref="aero.aixm.ValDistanceSignedType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRouteDesignatorPrefixType">
      <class ref="aero.aixm.CodeRouteDesignatorPrefixType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRVSMType">
      <class ref="aero.aixm.CodeRVSMType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRouteDesignatorLetterType">
      <class ref="aero.aixm.CodeRouteDesignatorLetterType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRouteDesignatorSuffixType">
      <class ref="aero.aixm.CodeRouteDesignatorSuffixType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeStatusAirspaceType">
      <class ref="aero.aixm.CodeStatusAirspaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRunwayPointRoleType">
      <class ref="aero.aixm.CodeRunwayPointRoleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRunwayType">
      <class ref="aero.aixm.CodeRunwayType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeMarkingStyleType">
      <class ref="aero.aixm.CodeMarkingStyleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeFinalGuidanceType">
      <class ref="aero.aixm.CodeFinalGuidanceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeMissedApproachType">
      <class ref="aero.aixm.CodeMissedApproachType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeUpperAlphaType">
      <class ref="aero.aixm.CodeUpperAlphaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeApproachPrefixType">
      <class ref="aero.aixm.CodeApproachPrefixType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeApproachType">
      <class ref="aero.aixm.CodeApproachType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeApprovalType">
      <class ref="aero.aixm.CodeApprovalType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeDesignStandardType">
      <class ref="aero.aixm.CodeDesignStandardType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeApproachEquipmentAdditionalType">
      <class ref="aero.aixm.CodeApproachEquipmentAdditionalType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeEquipmentUnavailableType">
      <class ref="aero.aixm.CodeEquipmentUnavailableType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeHoldingUseType">
      <class ref="aero.aixm.CodeHoldingUseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeProcedureDistanceType">
      <class ref="aero.aixm.CodeProcedureDistanceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeMinimaFinalApproachPathType">
      <class ref="aero.aixm.CodeMinimaFinalApproachPathType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeMinimumAltitudeType">
      <class ref="aero.aixm.CodeMinimumAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeMinimumHeightType">
      <class ref="aero.aixm.CodeMinimumHeightType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeProcedureCodingStandardType">
      <class ref="aero.aixm.CodeProcedureCodingStandardType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeSafeAltitudeType">
      <class ref="aero.aixm.CodeSafeAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeObstacleAssessmentSurfaceType">
      <class ref="aero.aixm.CodeObstacleAssessmentSurfaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAltitudeAdjustmentType">
      <class ref="aero.aixm.CodeAltitudeAdjustmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeTAAType">
      <class ref="aero.aixm.CodeTAAType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeArcDirectionType">
      <class ref="aero.aixm.CodeArcDirectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeLevelSeriesType">
      <class ref="aero.aixm.CodeLevelSeriesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValAlarmLimitType">
      <class ref="aero.aixm.ValAlarmLimitType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValChannelNumberType">
      <class ref="aero.aixm.ValChannelNumberType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeSegmentTerminationType">
      <class ref="aero.aixm.CodeSegmentTerminationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeReferenceRoleType">
      <class ref="aero.aixm.CodeReferenceRoleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeTrajectoryType">
      <class ref="aero.aixm.CodeTrajectoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TextNoteType">
      <class ref="aero.aixm.TextNoteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRunwayMarkingType">
      <class ref="aero.aixm.CodeRunwayMarkingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRVRReadingType">
      <class ref="aero.aixm.CodeRVRReadingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeStatusNavaidType">
      <class ref="aero.aixm.CodeStatusNavaidType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeOperationAirportHeliportType">
      <class ref="aero.aixm.CodeOperationAirportHeliportType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeDistanceIndicationType">
      <class ref="aero.aixm.CodeDistanceIndicationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeObstacleAreaType">
      <class ref="aero.aixm.CodeObstacleAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAirspaceClassificationType">
      <class ref="aero.aixm.CodeAirspaceClassificationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeApronElementType">
      <class ref="aero.aixm.CodeApronElementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRunwayElementType">
      <class ref="aero.aixm.CodeRunwayElementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAuthorityRoleType">
      <class ref="aero.aixm.CodeAuthorityRoleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeVORType">
      <class ref="aero.aixm.CodeVORType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeApproachLightingICAOType">
      <class ref="aero.aixm.CodeApproachLightingICAOType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeLightingJARType">
      <class ref="aero.aixm.CodeLightingJARType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeWorkAreaType">
      <class ref="aero.aixm.CodeWorkAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeVerticalStructureMaterialType">
      <class ref="aero.aixm.CodeVerticalStructureMaterialType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeGuidanceLineType">
      <class ref="aero.aixm.CodeGuidanceLineType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAirportWarningType">
      <class ref="aero.aixm.CodeAirportWarningType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeProtectAreaSectionType">
      <class ref="aero.aixm.CodeProtectAreaSectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRouteType">
      <class ref="aero.aixm.CodeRouteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAirspacePointPositionType">
      <class ref="aero.aixm.CodeAirspacePointPositionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValDepthType">
      <class ref="aero.aixm.ValDepthType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeContaminationType">
      <class ref="aero.aixm.CodeContaminationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeFrictionDeviceType">
      <class ref="aero.aixm.CodeFrictionDeviceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeFrictionEstimateType">
      <class ref="aero.aixm.CodeFrictionEstimateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeHeightReferenceType">
      <class ref="aero.aixm.CodeHeightReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValFrictionType">
      <class ref="aero.aixm.ValFrictionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeUUIDType">
      <class ref="aero.aixm.CodeUUIDType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAerialRefuellingPointType">
      <class ref="aero.aixm.CodeAerialRefuellingPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAerialRefuellingType">
      <class ref="aero.aixm.CodeAerialRefuellingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeLoadingBridgeType">
      <class ref="aero.aixm.CodeLoadingBridgeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeApproachGuidanceType">
      <class ref="aero.aixm.CodeApproachGuidanceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAircraftWingspanClassType">
      <class ref="aero.aixm.CodeAircraftWingspanClassType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeArrestingGearEngageDeviceType">
      <class ref="aero.aixm.CodeArrestingGearEngageDeviceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeObstructionIdSurfaceZoneType">
      <class ref="aero.aixm.CodeObstructionIdSurfaceZoneType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeBuoyType">
      <class ref="aero.aixm.CodeBuoyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRoadType">
      <class ref="aero.aixm.CodeRoadType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAerialRefuellingPrefixType">
      <class ref="aero.aixm.CodeAerialRefuellingPrefixType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeMilitaryTrainingType">
      <class ref="aero.aixm.CodeMilitaryTrainingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeFacilityRankingType">
      <class ref="aero.aixm.CodeFacilityRankingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeMilitaryRoutePointType">
      <class ref="aero.aixm.CodeMilitaryRoutePointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeArrestingGearEnergyAbsorbType">
      <class ref="aero.aixm.CodeArrestingGearEnergyAbsorbType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeEmissionBandType">
      <class ref="aero.aixm.CodeEmissionBandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeMeteoConditionsType">
      <class ref="aero.aixm.CodeMeteoConditionsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeValueInterpretationType">
      <class ref="aero.aixm.CodeValueInterpretationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeNavigationAreaType">
      <class ref="aero.aixm.CodeNavigationAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeProcedureAvailabilityType">
      <class ref="aero.aixm.CodeProcedureAvailabilityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodePilotControlledLightingType">
      <class ref="aero.aixm.CodePilotControlledLightingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeIntensityStandByType">
      <class ref="aero.aixm.CodeIntensityStandByType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TextPhoneType">
      <class ref="aero.aixm.TextPhoneType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeTelecomNetworkType">
      <class ref="aero.aixm.CodeTelecomNetworkType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeFlightDestinationType">
      <class ref="aero.aixm.CodeFlightDestinationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeServiceInformationType">
      <class ref="aero.aixm.CodeServiceInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeServiceATFMType">
      <class ref="aero.aixm.CodeServiceATFMType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeServiceATCType">
      <class ref="aero.aixm.CodeServiceATCType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeServiceSARType">
      <class ref="aero.aixm.CodeServiceSARType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeCommunicationChannelType">
      <class ref="aero.aixm.CodeCommunicationChannelType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodePassengerServiceType">
      <class ref="aero.aixm.CodePassengerServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeServiceGroundControlType">
      <class ref="aero.aixm.CodeServiceGroundControlType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeStatusServiceType">
      <class ref="aero.aixm.CodeStatusServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeCommunicationModeType">
      <class ref="aero.aixm.CodeCommunicationModeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeCommunicationDirectionType">
      <class ref="aero.aixm.CodeCommunicationDirectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeCheckpointCategoryType">
      <class ref="aero.aixm.CodeCheckpointCategoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeLightHoldingPositionType">
      <class ref="aero.aixm.CodeLightHoldingPositionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeNavigationAreaRestrictionType">
      <class ref="aero.aixm.CodeNavigationAreaRestrictionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeSystemActivationType">
      <class ref="aero.aixm.CodeSystemActivationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValLightIntensityType">
      <class ref="aero.aixm.ValLightIntensityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeWakeTurbulenceType">
      <class ref="aero.aixm.CodeWakeTurbulenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodePARType">
      <class ref="aero.aixm.CodePARType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodePrimaryRadarType">
      <class ref="aero.aixm.CodePrimaryRadarType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRadarServiceType">
      <class ref="aero.aixm.CodeRadarServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeReflectorType">
      <class ref="aero.aixm.CodeReflectorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeStandbyPowerType">
      <class ref="aero.aixm.CodeStandbyPowerType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeTransponderType">
      <class ref="aero.aixm.CodeTransponderType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAirspaceDependencyType">
      <class ref="aero.aixm.CodeAirspaceDependencyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeUnitDependencyType">
      <class ref="aero.aixm.CodeUnitDependencyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeVisualDockingGuidanceType">
      <class ref="aero.aixm.CodeVisualDockingGuidanceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeMarkingConditionType">
      <class ref="aero.aixm.CodeMarkingConditionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DateType">
      <class ref="aero.aixm.DateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeNavaidPurposeType">
      <class ref="aero.aixm.CodeNavaidPurposeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRuleProcedureType">
      <class ref="aero.aixm.CodeRuleProcedureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRuleProcedureTitleType">
      <class ref="aero.aixm.CodeRuleProcedureTitleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeGradeSeparationType">
      <class ref="aero.aixm.CodeGradeSeparationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeTaxiwayElementType">
      <class ref="aero.aixm.CodeTaxiwayElementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeAuralMorseType">
      <class ref="aero.aixm.CodeAuralMorseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRadioSignalType">
      <class ref="aero.aixm.CodeRadioSignalType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeSignalPerformanceILSType">
      <class ref="aero.aixm.CodeSignalPerformanceILSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeCourseQualityILSType">
      <class ref="aero.aixm.CodeCourseQualityILSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeIntegrityLevelILSType">
      <class ref="aero.aixm.CodeIntegrityLevelILSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeHoldingCategoryType">
      <class ref="aero.aixm.CodeHoldingCategoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeNotePurposeType">
      <class ref="aero.aixm.CodeNotePurposeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeNavigationEquipmentType">
      <class ref="aero.aixm.CodeNavigationEquipmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeNavigationSpecificationType">
      <class ref="aero.aixm.CodeNavigationSpecificationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeEquipmentAntiCollisionType">
      <class ref="aero.aixm.CodeEquipmentAntiCollisionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValPercentType">
      <class ref="aero.aixm.ValPercentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DateTimeType">
      <class ref="aero.aixm.DateTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeLogicalOperatorType">
      <class ref="aero.aixm.CodeLogicalOperatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeStatusAirportType">
      <class ref="aero.aixm.CodeStatusAirportType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeOperationManoeuvringAreaType">
      <class ref="aero.aixm.CodeOperationManoeuvringAreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TextPropertyNameType">
      <class ref="aero.aixm.TextPropertyNameType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeRelativePositionType">
      <class ref="aero.aixm.CodeRelativePositionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractAIXMFeatureBaseType">
      <class ref="aero.aixm.AbstractAIXMFeatureBaseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractAIXMPropertyType">
      <class ref="aero.aixm.AbstractAIXMPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractAIXMTimeSliceBaseType">
      <class ref="aero.aixm.AbstractAIXMTimeSliceBaseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractAIXMTimeSliceType">
      <class ref="aero.aixm.AbstractAIXMTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractAIXMMessageBaseType">
      <class ref="aero.aixm.AbstractAIXMMessageBaseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractAIXMMessageType">
      <class ref="aero.aixm.AbstractAIXMMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FeatureMetadataPropertyType">
      <class ref="aero.aixm.FeatureMetadataPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FeatureTimeSliceMetadataPropertyType">
      <class ref="aero.aixm.FeatureTimeSliceMetadataPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MessageMetadataPropertyType">
      <class ref="aero.aixm.MessageMetadataPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayProtectAreaPropertyType">
      <class ref="aero.aixm.RunwayProtectAreaPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayProtectAreaTimeSlicePropertyType">
      <class ref="aero.aixm.RunwayProtectAreaTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayDirectionPropertyType">
      <class ref="aero.aixm.RunwayDirectionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayDirectionTimeSlicePropertyType">
      <class ref="aero.aixm.RunwayDirectionTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayCentrelinePointPropertyType">
      <class ref="aero.aixm.RunwayCentrelinePointPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayCentrelinePointTimeSlicePropertyType">
      <class ref="aero.aixm.RunwayCentrelinePointTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayPropertyType">
      <class ref="aero.aixm.RunwayPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayTimeSlicePropertyType">
      <class ref="aero.aixm.RunwayTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrestingGearPropertyType">
      <class ref="aero.aixm.ArrestingGearPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrestingGearTimeSlicePropertyType">
      <class ref="aero.aixm.ArrestingGearTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayElementPropertyType">
      <class ref="aero.aixm.RunwayElementPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayElementTimeSlicePropertyType">
      <class ref="aero.aixm.RunwayElementTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VisualGlideSlopeIndicatorPropertyType">
      <class ref="aero.aixm.VisualGlideSlopeIndicatorPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VisualGlideSlopeIndicatorTimeSlicePropertyType">
      <class ref="aero.aixm.VisualGlideSlopeIndicatorTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayVisualRangePropertyType">
      <class ref="aero.aixm.RunwayVisualRangePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayVisualRangeTimeSlicePropertyType">
      <class ref="aero.aixm.RunwayVisualRangeTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayBlastPadPropertyType">
      <class ref="aero.aixm.RunwayBlastPadPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayBlastPadTimeSlicePropertyType">
      <class ref="aero.aixm.RunwayBlastPadTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavaidEquipmentDistancePropertyType">
      <class ref="aero.aixm.NavaidEquipmentDistancePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayDeclaredDistancePropertyType">
      <class ref="aero.aixm.RunwayDeclaredDistancePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayDeclaredDistanceValuePropertyType">
      <class ref="aero.aixm.RunwayDeclaredDistanceValuePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ManoeuvringAreaAvailabilityPropertyType">
      <class ref="aero.aixm.ManoeuvringAreaAvailabilityPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ManoeuvringAreaUsagePropertyType">
      <class ref="aero.aixm.ManoeuvringAreaUsagePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiHoldingPositionPropertyType">
      <class ref="aero.aixm.TaxiHoldingPositionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiHoldingPositionTimeSlicePropertyType">
      <class ref="aero.aixm.TaxiHoldingPositionTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayPropertyType">
      <class ref="aero.aixm.TaxiwayPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayTimeSlicePropertyType">
      <class ref="aero.aixm.TaxiwayTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayElementPropertyType">
      <class ref="aero.aixm.TaxiwayElementPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayElementTimeSlicePropertyType">
      <class ref="aero.aixm.TaxiwayElementTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GuidanceLinePropertyType">
      <class ref="aero.aixm.GuidanceLinePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GuidanceLineTimeSlicePropertyType">
      <class ref="aero.aixm.GuidanceLineTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronPropertyType">
      <class ref="aero.aixm.ApronPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronTimeSlicePropertyType">
      <class ref="aero.aixm.ApronTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronElementPropertyType">
      <class ref="aero.aixm.ApronElementPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronElementTimeSlicePropertyType">
      <class ref="aero.aixm.ApronElementTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftStandPropertyType">
      <class ref="aero.aixm.AircraftStandPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftStandTimeSlicePropertyType">
      <class ref="aero.aixm.AircraftStandTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RoadPropertyType">
      <class ref="aero.aixm.RoadPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RoadTimeSlicePropertyType">
      <class ref="aero.aixm.RoadTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronAreaAvailabilityPropertyType">
      <class ref="aero.aixm.ApronAreaAvailabilityPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronAreaUsagePropertyType">
      <class ref="aero.aixm.ApronAreaUsagePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DeicingAreaPropertyType">
      <class ref="aero.aixm.DeicingAreaPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DeicingAreaTimeSlicePropertyType">
      <class ref="aero.aixm.DeicingAreaTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PassengerLoadingBridgePropertyType">
      <class ref="aero.aixm.PassengerLoadingBridgePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PassengerLoadingBridgeTimeSlicePropertyType">
      <class ref="aero.aixm.PassengerLoadingBridgeTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffSafeAreaPropertyType">
      <class ref="aero.aixm.TouchDownLiftOffSafeAreaPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffSafeAreaTimeSlicePropertyType">
      <class ref="aero.aixm.TouchDownLiftOffSafeAreaTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffPropertyType">
      <class ref="aero.aixm.TouchDownLiftOffPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffTimeSlicePropertyType">
      <class ref="aero.aixm.TouchDownLiftOffTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroundLightSystemPropertyType">
      <class ref="aero.aixm.GroundLightSystemPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronLightSystemPropertyType">
      <class ref="aero.aixm.ApronLightSystemPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronLightSystemTimeSlicePropertyType">
      <class ref="aero.aixm.ApronLightSystemTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayLightSystemPropertyType">
      <class ref="aero.aixm.TaxiwayLightSystemPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayLightSystemTimeSlicePropertyType">
      <class ref="aero.aixm.TaxiwayLightSystemTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayDirectionLightSystemPropertyType">
      <class ref="aero.aixm.RunwayDirectionLightSystemPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayDirectionLightSystemTimeSlicePropertyType">
      <class ref="aero.aixm.RunwayDirectionLightSystemTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffLightSystemPropertyType">
      <class ref="aero.aixm.TouchDownLiftOffLightSystemPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffLightSystemTimeSlicePropertyType">
      <class ref="aero.aixm.TouchDownLiftOffLightSystemTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GuidanceLineLightSystemPropertyType">
      <class ref="aero.aixm.GuidanceLineLightSystemPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GuidanceLineLightSystemTimeSlicePropertyType">
      <class ref="aero.aixm.GuidanceLineLightSystemTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayProtectAreaLightSystemPropertyType">
      <class ref="aero.aixm.RunwayProtectAreaLightSystemPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayProtectAreaLightSystemTimeSlicePropertyType">
      <class ref="aero.aixm.RunwayProtectAreaLightSystemTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiHoldingPositionLightSystemPropertyType">
      <class ref="aero.aixm.TaxiHoldingPositionLightSystemPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiHoldingPositionLightSystemTimeSlicePropertyType">
      <class ref="aero.aixm.TaxiHoldingPositionLightSystemTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LightActivationPropertyType">
      <class ref="aero.aixm.LightActivationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroundLightingAvailabilityPropertyType">
      <class ref="aero.aixm.GroundLightingAvailabilityPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApproachLightingSystemPropertyType">
      <class ref="aero.aixm.ApproachLightingSystemPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApproachLightingSystemTimeSlicePropertyType">
      <class ref="aero.aixm.ApproachLightingSystemTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MarkingPropertyType">
      <class ref="aero.aixm.MarkingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MarkingElementPropertyType">
      <class ref="aero.aixm.MarkingElementPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayMarkingPropertyType">
      <class ref="aero.aixm.TaxiwayMarkingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayMarkingTimeSlicePropertyType">
      <class ref="aero.aixm.TaxiwayMarkingTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronMarkingPropertyType">
      <class ref="aero.aixm.ApronMarkingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronMarkingTimeSlicePropertyType">
      <class ref="aero.aixm.ApronMarkingTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportProtectionAreaMarkingPropertyType">
      <class ref="aero.aixm.AirportProtectionAreaMarkingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportProtectionAreaMarkingTimeSlicePropertyType">
      <class ref="aero.aixm.AirportProtectionAreaMarkingTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffMarkingPropertyType">
      <class ref="aero.aixm.TouchDownLiftOffMarkingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffMarkingTimeSlicePropertyType">
      <class ref="aero.aixm.TouchDownLiftOffMarkingTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayMarkingPropertyType">
      <class ref="aero.aixm.RunwayMarkingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayMarkingTimeSlicePropertyType">
      <class ref="aero.aixm.RunwayMarkingTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GuidanceLineMarkingPropertyType">
      <class ref="aero.aixm.GuidanceLineMarkingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GuidanceLineMarkingTimeSlicePropertyType">
      <class ref="aero.aixm.GuidanceLineMarkingTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DeicingAreaMarkingPropertyType">
      <class ref="aero.aixm.DeicingAreaMarkingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DeicingAreaMarkingTimeSlicePropertyType">
      <class ref="aero.aixm.DeicingAreaMarkingTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiHoldingPositionMarkingPropertyType">
      <class ref="aero.aixm.TaxiHoldingPositionMarkingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiHoldingPositionMarkingTimeSlicePropertyType">
      <class ref="aero.aixm.TaxiHoldingPositionMarkingTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandMarkingPropertyType">
      <class ref="aero.aixm.StandMarkingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandMarkingTimeSlicePropertyType">
      <class ref="aero.aixm.StandMarkingTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurfaceContaminationPropertyType">
      <class ref="aero.aixm.SurfaceContaminationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RidgePropertyType">
      <class ref="aero.aixm.RidgePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayContaminationPropertyType">
      <class ref="aero.aixm.RunwayContaminationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TaxiwayContaminationPropertyType">
      <class ref="aero.aixm.TaxiwayContaminationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurfaceContaminationLayerPropertyType">
      <class ref="aero.aixm.SurfaceContaminationLayerPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwaySectionContaminationPropertyType">
      <class ref="aero.aixm.RunwaySectionContaminationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TouchDownLiftOffContaminationPropertyType">
      <class ref="aero.aixm.TouchDownLiftOffContaminationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApronContaminationPropertyType">
      <class ref="aero.aixm.ApronContaminationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftStandContaminationPropertyType">
      <class ref="aero.aixm.AircraftStandContaminationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportContaminationPropertyType">
      <class ref="aero.aixm.AirportHeliportContaminationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FloatingDockSitePropertyType">
      <class ref="aero.aixm.FloatingDockSitePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FloatingDockSiteTimeSlicePropertyType">
      <class ref="aero.aixm.FloatingDockSiteTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MarkingBuoyPropertyType">
      <class ref="aero.aixm.MarkingBuoyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MarkingBuoyTimeSlicePropertyType">
      <class ref="aero.aixm.MarkingBuoyTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SeaplaneLandingAreaPropertyType">
      <class ref="aero.aixm.SeaplaneLandingAreaPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SeaplaneLandingAreaTimeSlicePropertyType">
      <class ref="aero.aixm.SeaplaneLandingAreaTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SeaplaneRampSitePropertyType">
      <class ref="aero.aixm.SeaplaneRampSitePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SeaplaneRampSiteTimeSlicePropertyType">
      <class ref="aero.aixm.SeaplaneRampSiteTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:WorkAreaPropertyType">
      <class ref="aero.aixm.WorkAreaPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:WorkAreaTimeSlicePropertyType">
      <class ref="aero.aixm.WorkAreaTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurveyControlPointPropertyType">
      <class ref="aero.aixm.SurveyControlPointPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurveyControlPointTimeSlicePropertyType">
      <class ref="aero.aixm.SurveyControlPointTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurfaceCharacteristicsPropertyType">
      <class ref="aero.aixm.SurfaceCharacteristicsPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NonMovementAreaPropertyType">
      <class ref="aero.aixm.NonMovementAreaPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NonMovementAreaTimeSlicePropertyType">
      <class ref="aero.aixm.NonMovementAreaTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CityPropertyType">
      <class ref="aero.aixm.CityPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UsageConditionPropertyType">
      <class ref="aero.aixm.UsageConditionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportProtectionAreaPropertyType">
      <class ref="aero.aixm.AirportHeliportProtectionAreaPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportCollocationPropertyType">
      <class ref="aero.aixm.AirportHeliportCollocationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportCollocationTimeSlicePropertyType">
      <class ref="aero.aixm.AirportHeliportCollocationTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportPropertyType">
      <class ref="aero.aixm.AirportHeliportPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportTimeSlicePropertyType">
      <class ref="aero.aixm.AirportHeliportTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AltimeterSourcePropertyType">
      <class ref="aero.aixm.AltimeterSourcePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AltimeterSourceTimeSlicePropertyType">
      <class ref="aero.aixm.AltimeterSourceTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportResponsibilityOrganisationPropertyType">
      <class ref="aero.aixm.AirportHeliportResponsibilityOrganisationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHotSpotPropertyType">
      <class ref="aero.aixm.AirportHotSpotPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHotSpotTimeSlicePropertyType">
      <class ref="aero.aixm.AirportHotSpotTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AltimeterSourceStatusPropertyType">
      <class ref="aero.aixm.AltimeterSourceStatusPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:WorkareaActivityPropertyType">
      <class ref="aero.aixm.WorkareaActivityPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ConditionCombinationPropertyType">
      <class ref="aero.aixm.ConditionCombinationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportAvailabilityPropertyType">
      <class ref="aero.aixm.AirportHeliportAvailabilityPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportHeliportUsagePropertyType">
      <class ref="aero.aixm.AirportHeliportUsagePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AuthorityForAirspacePropertyType">
      <class ref="aero.aixm.AuthorityForAirspacePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AuthorityForAirspaceTimeSlicePropertyType">
      <class ref="aero.aixm.AuthorityForAirspaceTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspacePropertyType">
      <class ref="aero.aixm.AirspacePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceTimeSlicePropertyType">
      <class ref="aero.aixm.AirspaceTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceGeometryComponentPropertyType">
      <class ref="aero.aixm.AirspaceGeometryComponentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceVolumePropertyType">
      <class ref="aero.aixm.AirspaceVolumePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceActivationPropertyType">
      <class ref="aero.aixm.AirspaceActivationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceLayerClassPropertyType">
      <class ref="aero.aixm.AirspaceLayerClassPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeoBorderPropertyType">
      <class ref="aero.aixm.GeoBorderPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeoBorderTimeSlicePropertyType">
      <class ref="aero.aixm.GeoBorderTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceVolumeDependencyPropertyType">
      <class ref="aero.aixm.AirspaceVolumeDependencyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CurvePropertyType">
      <class ref="aero.aixm.CurvePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ElevatedCurvePropertyType">
      <class ref="aero.aixm.ElevatedCurvePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ElevatedPointPropertyType">
      <class ref="aero.aixm.ElevatedPointPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ElevatedSurfacePropertyType">
      <class ref="aero.aixm.ElevatedSurfacePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PointPropertyType">
      <class ref="aero.aixm.PointPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurfacePropertyType">
      <class ref="aero.aixm.SurfacePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PrecisionApproachRadarPropertyType">
      <class ref="aero.aixm.PrecisionApproachRadarPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PrecisionApproachRadarTimeSlicePropertyType">
      <class ref="aero.aixm.PrecisionApproachRadarTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PrimarySurveillanceRadarPropertyType">
      <class ref="aero.aixm.PrimarySurveillanceRadarPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PrimarySurveillanceRadarTimeSlicePropertyType">
      <class ref="aero.aixm.PrimarySurveillanceRadarTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadarComponentPropertyType">
      <class ref="aero.aixm.RadarComponentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadarEquipmentPropertyType">
      <class ref="aero.aixm.RadarEquipmentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadarSystemPropertyType">
      <class ref="aero.aixm.RadarSystemPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadarSystemTimeSlicePropertyType">
      <class ref="aero.aixm.RadarSystemTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ReflectorPropertyType">
      <class ref="aero.aixm.ReflectorPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SecondarySurveillanceRadarPropertyType">
      <class ref="aero.aixm.SecondarySurveillanceRadarPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SecondarySurveillanceRadarTimeSlicePropertyType">
      <class ref="aero.aixm.SecondarySurveillanceRadarTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurveillanceRadarPropertyType">
      <class ref="aero.aixm.SurveillanceRadarPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurveillanceGroundStationPropertyType">
      <class ref="aero.aixm.SurveillanceGroundStationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ObstacleAssessmentAreaPropertyType">
      <class ref="aero.aixm.ObstacleAssessmentAreaPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ObstructionPropertyType">
      <class ref="aero.aixm.ObstructionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AltitudeAdjustmentPropertyType">
      <class ref="aero.aixm.AltitudeAdjustmentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HoldingAssessmentPropertyType">
      <class ref="aero.aixm.HoldingAssessmentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HoldingAssessmentTimeSlicePropertyType">
      <class ref="aero.aixm.HoldingAssessmentTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ObstaclePlacementPropertyType">
      <class ref="aero.aixm.ObstaclePlacementPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardLevelTablePropertyType">
      <class ref="aero.aixm.StandardLevelTablePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardLevelTableTimeSlicePropertyType">
      <class ref="aero.aixm.StandardLevelTableTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardLevelSectorPropertyType">
      <class ref="aero.aixm.StandardLevelSectorPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardLevelSectorTimeSlicePropertyType">
      <class ref="aero.aixm.StandardLevelSectorTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardLevelColumnPropertyType">
      <class ref="aero.aixm.StandardLevelColumnPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardLevelColumnTimeSlicePropertyType">
      <class ref="aero.aixm.StandardLevelColumnTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardLevelPropertyType">
      <class ref="aero.aixm.StandardLevelPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioFrequencyAreaPropertyType">
      <class ref="aero.aixm.RadioFrequencyAreaPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioFrequencyAreaTimeSlicePropertyType">
      <class ref="aero.aixm.RadioFrequencyAreaTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ContactInformationPropertyType">
      <class ref="aero.aixm.ContactInformationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OnlineContactPropertyType">
      <class ref="aero.aixm.OnlineContactPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PostalAddressPropertyType">
      <class ref="aero.aixm.PostalAddressPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TelephoneContactPropertyType">
      <class ref="aero.aixm.TelephoneContactPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftCharacteristicPropertyType">
      <class ref="aero.aixm.AircraftCharacteristicPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightCharacteristicPropertyType">
      <class ref="aero.aixm.FlightCharacteristicPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LightElementPropertyType">
      <class ref="aero.aixm.LightElementPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LightElementStatusPropertyType">
      <class ref="aero.aixm.LightElementStatusPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceLayerPropertyType">
      <class ref="aero.aixm.AirspaceLayerPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CircleSectorPropertyType">
      <class ref="aero.aixm.CircleSectorPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimesheetPropertyType">
      <class ref="aero.aixm.TimesheetPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PropertiesWithSchedulePropertyType">
      <class ref="aero.aixm.PropertiesWithSchedulePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialDatePropertyType">
      <class ref="aero.aixm.SpecialDatePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialDateTimeSlicePropertyType">
      <class ref="aero.aixm.SpecialDateTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MeteorologyPropertyType">
      <class ref="aero.aixm.MeteorologyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ServicePropertyType">
      <class ref="aero.aixm.ServicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioCommunicationChannelPropertyType">
      <class ref="aero.aixm.RadioCommunicationChannelPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioCommunicationChannelTimeSlicePropertyType">
      <class ref="aero.aixm.RadioCommunicationChannelTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CallsignDetailPropertyType">
      <class ref="aero.aixm.CallsignDetailPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PilotControlledLightingPropertyType">
      <class ref="aero.aixm.PilotControlledLightingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PilotControlledLightingTimeSlicePropertyType">
      <class ref="aero.aixm.PilotControlledLightingTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InformationServicePropertyType">
      <class ref="aero.aixm.InformationServicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InformationServiceTimeSlicePropertyType">
      <class ref="aero.aixm.InformationServiceTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TrafficSeparationServicePropertyType">
      <class ref="aero.aixm.TrafficSeparationServicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroundTrafficControlServicePropertyType">
      <class ref="aero.aixm.GroundTrafficControlServicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroundTrafficControlServiceTimeSlicePropertyType">
      <class ref="aero.aixm.GroundTrafficControlServiceTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirTrafficControlServicePropertyType">
      <class ref="aero.aixm.AirTrafficControlServicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirTrafficControlServiceTimeSlicePropertyType">
      <class ref="aero.aixm.AirTrafficControlServiceTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirTrafficManagementServicePropertyType">
      <class ref="aero.aixm.AirTrafficManagementServicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirTrafficManagementServiceTimeSlicePropertyType">
      <class ref="aero.aixm.AirTrafficManagementServiceTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SearchRescueServicePropertyType">
      <class ref="aero.aixm.SearchRescueServicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SearchRescueServiceTimeSlicePropertyType">
      <class ref="aero.aixm.SearchRescueServiceTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportGroundServicePropertyType">
      <class ref="aero.aixm.AirportGroundServicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PassengerServicePropertyType">
      <class ref="aero.aixm.PassengerServicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PassengerServiceTimeSlicePropertyType">
      <class ref="aero.aixm.PassengerServiceTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftGroundServicePropertyType">
      <class ref="aero.aixm.AircraftGroundServicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftGroundServiceTimeSlicePropertyType">
      <class ref="aero.aixm.AircraftGroundServiceTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FireFightingServicePropertyType">
      <class ref="aero.aixm.FireFightingServicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FireFightingServiceTimeSlicePropertyType">
      <class ref="aero.aixm.FireFightingServiceTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportClearanceServicePropertyType">
      <class ref="aero.aixm.AirportClearanceServicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportClearanceServiceTimeSlicePropertyType">
      <class ref="aero.aixm.AirportClearanceServiceTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportSuppliesServicePropertyType">
      <class ref="aero.aixm.AirportSuppliesServicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirportSuppliesServiceTimeSlicePropertyType">
      <class ref="aero.aixm.AirportSuppliesServiceTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FuelPropertyType">
      <class ref="aero.aixm.FuelPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NitrogenPropertyType">
      <class ref="aero.aixm.NitrogenPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OilPropertyType">
      <class ref="aero.aixm.OilPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OxygenPropertyType">
      <class ref="aero.aixm.OxygenPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ServiceOperationalStatusPropertyType">
      <class ref="aero.aixm.ServiceOperationalStatusPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioCommunicationOperationalStatusPropertyType">
      <class ref="aero.aixm.RadioCommunicationOperationalStatusPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PointReferencePropertyType">
      <class ref="aero.aixm.PointReferencePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SegmentPointPropertyType">
      <class ref="aero.aixm.SegmentPointPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TerminalSegmentPointPropertyType">
      <class ref="aero.aixm.TerminalSegmentPointPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EnRouteSegmentPointPropertyType">
      <class ref="aero.aixm.EnRouteSegmentPointPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AngleIndicationPropertyType">
      <class ref="aero.aixm.AngleIndicationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AngleIndicationTimeSlicePropertyType">
      <class ref="aero.aixm.AngleIndicationTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DistanceIndicationPropertyType">
      <class ref="aero.aixm.DistanceIndicationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DistanceIndicationTimeSlicePropertyType">
      <class ref="aero.aixm.DistanceIndicationTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AngleUsePropertyType">
      <class ref="aero.aixm.AngleUsePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AuthorityForNavaidEquipmentPropertyType">
      <class ref="aero.aixm.AuthorityForNavaidEquipmentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AuthorityForSpecialNavigationStationPropertyType">
      <class ref="aero.aixm.AuthorityForSpecialNavigationStationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AzimuthPropertyType">
      <class ref="aero.aixm.AzimuthPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AzimuthTimeSlicePropertyType">
      <class ref="aero.aixm.AzimuthTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CheckpointINSPropertyType">
      <class ref="aero.aixm.CheckpointINSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CheckpointINSTimeSlicePropertyType">
      <class ref="aero.aixm.CheckpointINSTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CheckpointVORPropertyType">
      <class ref="aero.aixm.CheckpointVORPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CheckpointVORTimeSlicePropertyType">
      <class ref="aero.aixm.CheckpointVORTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AuthorityForSpecialNavigationSystemPropertyType">
      <class ref="aero.aixm.AuthorityForSpecialNavigationSystemPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DMEPropertyType">
      <class ref="aero.aixm.DMEPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DMETimeSlicePropertyType">
      <class ref="aero.aixm.DMETimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ElevationPropertyType">
      <class ref="aero.aixm.ElevationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ElevationTimeSlicePropertyType">
      <class ref="aero.aixm.ElevationTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GlidepathPropertyType">
      <class ref="aero.aixm.GlidepathPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GlidepathTimeSlicePropertyType">
      <class ref="aero.aixm.GlidepathTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LocalizerPropertyType">
      <class ref="aero.aixm.LocalizerPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LocalizerTimeSlicePropertyType">
      <class ref="aero.aixm.LocalizerTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MarkerBeaconPropertyType">
      <class ref="aero.aixm.MarkerBeaconPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MarkerBeaconTimeSlicePropertyType">
      <class ref="aero.aixm.MarkerBeaconTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavaidPropertyType">
      <class ref="aero.aixm.NavaidPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavaidTimeSlicePropertyType">
      <class ref="aero.aixm.NavaidTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavaidComponentPropertyType">
      <class ref="aero.aixm.NavaidComponentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavaidEquipmentPropertyType">
      <class ref="aero.aixm.NavaidEquipmentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavigationSystemCheckpointPropertyType">
      <class ref="aero.aixm.NavigationSystemCheckpointPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SDFPropertyType">
      <class ref="aero.aixm.SDFPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SDFTimeSlicePropertyType">
      <class ref="aero.aixm.SDFTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NDBPropertyType">
      <class ref="aero.aixm.NDBPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NDBTimeSlicePropertyType">
      <class ref="aero.aixm.NDBTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialNavigationStationPropertyType">
      <class ref="aero.aixm.SpecialNavigationStationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialNavigationStationTimeSlicePropertyType">
      <class ref="aero.aixm.SpecialNavigationStationTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VORPropertyType">
      <class ref="aero.aixm.VORPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VORTimeSlicePropertyType">
      <class ref="aero.aixm.VORTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TACANPropertyType">
      <class ref="aero.aixm.TACANPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TACANTimeSlicePropertyType">
      <class ref="aero.aixm.TACANTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialNavigationSystemPropertyType">
      <class ref="aero.aixm.SpecialNavigationSystemPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialNavigationSystemTimeSlicePropertyType">
      <class ref="aero.aixm.SpecialNavigationSystemTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavaidOperationalStatusPropertyType">
      <class ref="aero.aixm.NavaidOperationalStatusPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavaidEquipmentMonitoringPropertyType">
      <class ref="aero.aixm.NavaidEquipmentMonitoringPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialNavigationStationStatusPropertyType">
      <class ref="aero.aixm.SpecialNavigationStationStatusPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectionFinderPropertyType">
      <class ref="aero.aixm.DirectionFinderPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectionFinderTimeSlicePropertyType">
      <class ref="aero.aixm.DirectionFinderTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DesignatedPointPropertyType">
      <class ref="aero.aixm.DesignatedPointPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DesignatedPointTimeSlicePropertyType">
      <class ref="aero.aixm.DesignatedPointTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SignificantPointInAirspacePropertyType">
      <class ref="aero.aixm.SignificantPointInAirspacePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SignificantPointInAirspaceTimeSlicePropertyType">
      <class ref="aero.aixm.SignificantPointInAirspaceTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AeronauticalGroundLightPropertyType">
      <class ref="aero.aixm.AeronauticalGroundLightPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AeronauticalGroundLightTimeSlicePropertyType">
      <class ref="aero.aixm.AeronauticalGroundLightTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NotePropertyType">
      <class ref="aero.aixm.NotePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LinguisticNotePropertyType">
      <class ref="aero.aixm.LinguisticNotePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OrganisationAuthorityPropertyType">
      <class ref="aero.aixm.OrganisationAuthorityPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OrganisationAuthorityTimeSlicePropertyType">
      <class ref="aero.aixm.OrganisationAuthorityTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OrganisationAuthorityAssociationPropertyType">
      <class ref="aero.aixm.OrganisationAuthorityAssociationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnitPropertyType">
      <class ref="aero.aixm.UnitPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnitTimeSlicePropertyType">
      <class ref="aero.aixm.UnitTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnitDependencyPropertyType">
      <class ref="aero.aixm.UnitDependencyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnitAvailabilityPropertyType">
      <class ref="aero.aixm.UnitAvailabilityPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalStructurePartPropertyType">
      <class ref="aero.aixm.VerticalStructurePartPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ObstacleAreaPropertyType">
      <class ref="aero.aixm.ObstacleAreaPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ObstacleAreaTimeSlicePropertyType">
      <class ref="aero.aixm.ObstacleAreaTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalStructurePropertyType">
      <class ref="aero.aixm.VerticalStructurePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalStructureTimeSlicePropertyType">
      <class ref="aero.aixm.VerticalStructureTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalStructureLightingStatusPropertyType">
      <class ref="aero.aixm.VerticalStructureLightingStatusPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CirclingRestrictionPropertyType">
      <class ref="aero.aixm.CirclingRestrictionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CirclingAreaPropertyType">
      <class ref="aero.aixm.CirclingAreaPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CirclingAreaTimeSlicePropertyType">
      <class ref="aero.aixm.CirclingAreaTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MinimaPropertyType">
      <class ref="aero.aixm.MinimaPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EquipmentUnavailableAdjustmentPropertyType">
      <class ref="aero.aixm.EquipmentUnavailableAdjustmentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EquipmentUnavailableAdjustmentColumnPropertyType">
      <class ref="aero.aixm.EquipmentUnavailableAdjustmentColumnPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TerminalArrivalAreaSectorPropertyType">
      <class ref="aero.aixm.TerminalArrivalAreaSectorPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TerminalArrivalAreaPropertyType">
      <class ref="aero.aixm.TerminalArrivalAreaPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TerminalArrivalAreaTimeSlicePropertyType">
      <class ref="aero.aixm.TerminalArrivalAreaTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FASDataBlockPropertyType">
      <class ref="aero.aixm.FASDataBlockPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApproachAltitudeTablePropertyType">
      <class ref="aero.aixm.ApproachAltitudeTablePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApproachDistanceTablePropertyType">
      <class ref="aero.aixm.ApproachDistanceTablePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApproachTimingTablePropertyType">
      <class ref="aero.aixm.ApproachTimingTablePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FinalProfilePropertyType">
      <class ref="aero.aixm.FinalProfilePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InstrumentApproachProcedurePropertyType">
      <class ref="aero.aixm.InstrumentApproachProcedurePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InstrumentApproachProcedureTimeSlicePropertyType">
      <class ref="aero.aixm.InstrumentApproachProcedureTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MissedApproachGroupPropertyType">
      <class ref="aero.aixm.MissedApproachGroupPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApproachConditionPropertyType">
      <class ref="aero.aixm.ApproachConditionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardInstrumentDeparturePropertyType">
      <class ref="aero.aixm.StandardInstrumentDeparturePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardInstrumentDepartureTimeSlicePropertyType">
      <class ref="aero.aixm.StandardInstrumentDepartureTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavigationAreaPropertyType">
      <class ref="aero.aixm.NavigationAreaPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavigationAreaTimeSlicePropertyType">
      <class ref="aero.aixm.NavigationAreaTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavigationAreaSectorPropertyType">
      <class ref="aero.aixm.NavigationAreaSectorPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DepartureArrivalConditionPropertyType">
      <class ref="aero.aixm.DepartureArrivalConditionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SectorDesignPropertyType">
      <class ref="aero.aixm.SectorDesignPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardInstrumentArrivalPropertyType">
      <class ref="aero.aixm.StandardInstrumentArrivalPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardInstrumentArrivalTimeSlicePropertyType">
      <class ref="aero.aixm.StandardInstrumentArrivalTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ProcedureAvailabilityPropertyType">
      <class ref="aero.aixm.ProcedureAvailabilityPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ProcedurePropertyType">
      <class ref="aero.aixm.ProcedurePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavigationAreaRestrictionPropertyType">
      <class ref="aero.aixm.NavigationAreaRestrictionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavigationAreaRestrictionTimeSlicePropertyType">
      <class ref="aero.aixm.NavigationAreaRestrictionTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SegmentLegPropertyType">
      <class ref="aero.aixm.SegmentLegPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ProcedureTransitionPropertyType">
      <class ref="aero.aixm.ProcedureTransitionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HoldingUsePropertyType">
      <class ref="aero.aixm.HoldingUsePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ApproachLegPropertyType">
      <class ref="aero.aixm.ApproachLegPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrivalFeederLegPropertyType">
      <class ref="aero.aixm.ArrivalFeederLegPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrivalFeederLegTimeSlicePropertyType">
      <class ref="aero.aixm.ArrivalFeederLegTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrivalLegPropertyType">
      <class ref="aero.aixm.ArrivalLegPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrivalLegTimeSlicePropertyType">
      <class ref="aero.aixm.ArrivalLegTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DepartureLegPropertyType">
      <class ref="aero.aixm.DepartureLegPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DepartureLegTimeSlicePropertyType">
      <class ref="aero.aixm.DepartureLegTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FinalLegPropertyType">
      <class ref="aero.aixm.FinalLegPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FinalLegTimeSlicePropertyType">
      <class ref="aero.aixm.FinalLegTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InitialLegPropertyType">
      <class ref="aero.aixm.InitialLegPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InitialLegTimeSlicePropertyType">
      <class ref="aero.aixm.InitialLegTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:IntermediateLegPropertyType">
      <class ref="aero.aixm.IntermediateLegPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:IntermediateLegTimeSlicePropertyType">
      <class ref="aero.aixm.IntermediateLegTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MissedApproachLegPropertyType">
      <class ref="aero.aixm.MissedApproachLegPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MissedApproachLegTimeSlicePropertyType">
      <class ref="aero.aixm.MissedApproachLegTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ProcedureTransitionLegPropertyType">
      <class ref="aero.aixm.ProcedureTransitionLegPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LandingTakeoffAreaCollectionPropertyType">
      <class ref="aero.aixm.LandingTakeoffAreaCollectionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ProcedureDMEPropertyType">
      <class ref="aero.aixm.ProcedureDMEPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ProcedureDMETimeSlicePropertyType">
      <class ref="aero.aixm.ProcedureDMETimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SafeAltitudeAreaPropertyType">
      <class ref="aero.aixm.SafeAltitudeAreaPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SafeAltitudeAreaTimeSlicePropertyType">
      <class ref="aero.aixm.SafeAltitudeAreaTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SafeAltitudeAreaSectorPropertyType">
      <class ref="aero.aixm.SafeAltitudeAreaSectorPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HoldingPatternPropertyType">
      <class ref="aero.aixm.HoldingPatternPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HoldingPatternTimeSlicePropertyType">
      <class ref="aero.aixm.HoldingPatternTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnplannedHoldingPropertyType">
      <class ref="aero.aixm.UnplannedHoldingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnplannedHoldingTimeSlicePropertyType">
      <class ref="aero.aixm.UnplannedHoldingTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HoldingPatternDurationPropertyType">
      <class ref="aero.aixm.HoldingPatternDurationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HoldingPatternDistancePropertyType">
      <class ref="aero.aixm.HoldingPatternDistancePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceBorderCrossingPropertyType">
      <class ref="aero.aixm.AirspaceBorderCrossingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceBorderCrossingTimeSlicePropertyType">
      <class ref="aero.aixm.AirspaceBorderCrossingTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectFlightPropertyType">
      <class ref="aero.aixm.DirectFlightPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectFlightClassPropertyType">
      <class ref="aero.aixm.DirectFlightClassPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectFlightSegmentPropertyType">
      <class ref="aero.aixm.DirectFlightSegmentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightConditionCombinationPropertyType">
      <class ref="aero.aixm.FlightConditionCombinationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightConditionCircumstancePropertyType">
      <class ref="aero.aixm.FlightConditionCircumstancePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightRestrictionLevelPropertyType">
      <class ref="aero.aixm.FlightRestrictionLevelPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightRestrictionPropertyType">
      <class ref="aero.aixm.FlightRestrictionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightRestrictionTimeSlicePropertyType">
      <class ref="aero.aixm.FlightRestrictionTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightRestrictionRoutePropertyType">
      <class ref="aero.aixm.FlightRestrictionRoutePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightRoutingElementPropertyType">
      <class ref="aero.aixm.FlightRoutingElementPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightConditionElementPropertyType">
      <class ref="aero.aixm.FlightConditionElementPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteSegmentPropertyType">
      <class ref="aero.aixm.RouteSegmentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteSegmentTimeSlicePropertyType">
      <class ref="aero.aixm.RouteSegmentTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteAvailabilityPropertyType">
      <class ref="aero.aixm.RouteAvailabilityPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RoutePortionPropertyType">
      <class ref="aero.aixm.RoutePortionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteDMEPropertyType">
      <class ref="aero.aixm.RouteDMEPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteDMETimeSlicePropertyType">
      <class ref="aero.aixm.RouteDMETimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RoutePropertyType">
      <class ref="aero.aixm.RoutePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteTimeSlicePropertyType">
      <class ref="aero.aixm.RouteTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ChangeOverPointPropertyType">
      <class ref="aero.aixm.ChangeOverPointPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ChangeOverPointTimeSlicePropertyType">
      <class ref="aero.aixm.ChangeOverPointTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AerialRefuellingPropertyType">
      <class ref="aero.aixm.AerialRefuellingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AerialRefuellingTimeSlicePropertyType">
      <class ref="aero.aixm.AerialRefuellingTimeSlicePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AerialRefuellingPointPropertyType">
      <class ref="aero.aixm.AerialRefuellingPointPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AerialRefuellingAnchorPropertyType">
      <class ref="aero.aixm.AerialRefuellingAnchorPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AerialRefuellingTrackPropertyType">
      <class ref="aero.aixm.AerialRefuellingTrackPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AuthorityForAerialRefuellingPropertyType">
      <class ref="aero.aixm.AuthorityForAerialRefuellingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RulesProceduresPropertyType">
      <class ref="aero.aixm.RulesProceduresPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RulesProceduresTimeSlicePropertyType">
      <class ref="aero.aixm.RulesProceduresTimeSlicePropertyType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.opengis.net/gml/3.2" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="net.opengis.gml"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:TinType">
      <class ref="net.opengis.gml.TinType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractGriddedSurfaceType">
      <class ref="net.opengis.gml.AbstractGriddedSurfaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ClothoidType">
      <class ref="net.opengis.gml.ClothoidType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractGMLType">
      <class ref="net.opengis.gml.AbstractGMLType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AssociationRoleType">
      <class ref="net.opengis.gml.AssociationRoleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ReferenceType">
      <class ref="net.opengis.gml.ReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InlinePropertyType">
      <class ref="net.opengis.gml.InlinePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StringOrRefType">
      <class ref="net.opengis.gml.StringOrRefType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeType">
      <class ref="net.opengis.gml.CodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeWithAuthorityType">
      <class ref="net.opengis.gml.CodeWithAuthorityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DefinitionType">
      <class ref="net.opengis.gml.DefinitionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DictionaryType">
      <class ref="net.opengis.gml.DictionaryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DictionaryEntryType">
      <class ref="net.opengis.gml.DictionaryEntryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnitOfMeasureType">
      <class ref="net.opengis.gml.UnitOfMeasureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnitDefinitionType">
      <class ref="net.opengis.gml.UnitDefinitionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BaseUnitType">
      <class ref="net.opengis.gml.BaseUnitType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DerivedUnitType">
      <class ref="net.opengis.gml.DerivedUnitType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DerivationUnitTermType">
      <class ref="net.opengis.gml.DerivationUnitTermType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ConventionalUnitType">
      <class ref="net.opengis.gml.ConventionalUnitType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ConversionToPreferredUnitType">
      <class ref="net.opengis.gml.ConversionToPreferredUnitType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MeasureType">
      <class ref="net.opengis.gml.MeasureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AngleType">
      <class ref="net.opengis.gml.AngleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractGeometryType">
      <class ref="net.opengis.gml.AbstractGeometryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectPositionType">
      <class ref="net.opengis.gml.DirectPositionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectPositionListType">
      <class ref="net.opengis.gml.DirectPositionListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VectorType">
      <class ref="net.opengis.gml.VectorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EnvelopeType">
      <class ref="net.opengis.gml.EnvelopeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractGeometricPrimitiveType">
      <class ref="net.opengis.gml.AbstractGeometricPrimitiveType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PointType">
      <class ref="net.opengis.gml.PointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PointPropertyType">
      <class ref="net.opengis.gml.PointPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractCurveType">
      <class ref="net.opengis.gml.AbstractCurveType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CurvePropertyType">
      <class ref="net.opengis.gml.CurvePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LineStringType">
      <class ref="net.opengis.gml.LineStringType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractSurfaceType">
      <class ref="net.opengis.gml.AbstractSurfaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurfacePropertyType">
      <class ref="net.opengis.gml.SurfacePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PolygonType">
      <class ref="net.opengis.gml.PolygonType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractRingPropertyType">
      <class ref="net.opengis.gml.AbstractRingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractRingType">
      <class ref="net.opengis.gml.AbstractRingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LinearRingType">
      <class ref="net.opengis.gml.LinearRingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CurveType">
      <class ref="net.opengis.gml.CurveType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OrientableCurveType">
      <class ref="net.opengis.gml.OrientableCurveType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractCurveSegmentType">
      <class ref="net.opengis.gml.AbstractCurveSegmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CurveSegmentArrayPropertyType">
      <class ref="net.opengis.gml.CurveSegmentArrayPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LineStringSegmentType">
      <class ref="net.opengis.gml.LineStringSegmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArcStringType">
      <class ref="net.opengis.gml.ArcStringType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArcType">
      <class ref="net.opengis.gml.ArcType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CircleType">
      <class ref="net.opengis.gml.CircleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArcStringByBulgeType">
      <class ref="net.opengis.gml.ArcStringByBulgeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArcByBulgeType">
      <class ref="net.opengis.gml.ArcByBulgeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArcByCenterPointType">
      <class ref="net.opengis.gml.ArcByCenterPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CircleByCenterPointType">
      <class ref="net.opengis.gml.CircleByCenterPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CubicSplineType">
      <class ref="net.opengis.gml.CubicSplineType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BSplineType">
      <class ref="net.opengis.gml.BSplineType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BezierType">
      <class ref="net.opengis.gml.BezierType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OffsetCurveType">
      <class ref="net.opengis.gml.OffsetCurveType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AffinePlacementType">
      <class ref="net.opengis.gml.AffinePlacementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeodesicStringType">
      <class ref="net.opengis.gml.GeodesicStringType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeodesicType">
      <class ref="net.opengis.gml.GeodesicType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurfaceType">
      <class ref="net.opengis.gml.SurfaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OrientableSurfaceType">
      <class ref="net.opengis.gml.OrientableSurfaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractSurfacePatchType">
      <class ref="net.opengis.gml.AbstractSurfacePatchType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurfacePatchArrayPropertyType">
      <class ref="net.opengis.gml.SurfacePatchArrayPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PolygonPatchType">
      <class ref="net.opengis.gml.PolygonPatchType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TriangleType">
      <class ref="net.opengis.gml.TriangleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RectangleType">
      <class ref="net.opengis.gml.RectangleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RingType">
      <class ref="net.opengis.gml.RingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractParametricCurveSurfaceType">
      <class ref="net.opengis.gml.AbstractParametricCurveSurfaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ConeType">
      <class ref="net.opengis.gml.ConeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CylinderType">
      <class ref="net.opengis.gml.CylinderType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SphereType">
      <class ref="net.opengis.gml.SphereType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractSolidType">
      <class ref="net.opengis.gml.AbstractSolidType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SolidPropertyType">
      <class ref="net.opengis.gml.SolidPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SolidType">
      <class ref="net.opengis.gml.SolidType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ShellType">
      <class ref="net.opengis.gml.ShellType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractGeometricAggregateType">
      <class ref="net.opengis.gml.AbstractGeometricAggregateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MultiGeometryType">
      <class ref="net.opengis.gml.MultiGeometryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeometryPropertyType">
      <class ref="net.opengis.gml.GeometryPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeometryArrayPropertyType">
      <class ref="net.opengis.gml.GeometryArrayPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MultiPointType">
      <class ref="net.opengis.gml.MultiPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PointArrayPropertyType">
      <class ref="net.opengis.gml.PointArrayPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MultiCurveType">
      <class ref="net.opengis.gml.MultiCurveType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CurveArrayPropertyType">
      <class ref="net.opengis.gml.CurveArrayPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MultiSurfaceType">
      <class ref="net.opengis.gml.MultiSurfaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurfaceArrayPropertyType">
      <class ref="net.opengis.gml.SurfaceArrayPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MultiSolidType">
      <class ref="net.opengis.gml.MultiSolidType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SolidArrayPropertyType">
      <class ref="net.opengis.gml.SolidArrayPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractTimeObjectType">
      <class ref="net.opengis.gml.AbstractTimeObjectType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractTimePrimitiveType">
      <class ref="net.opengis.gml.AbstractTimePrimitiveType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimePrimitivePropertyType">
      <class ref="net.opengis.gml.TimePrimitivePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractTimeComplexType">
      <class ref="net.opengis.gml.AbstractTimeComplexType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractTimeGeometricPrimitiveType">
      <class ref="net.opengis.gml.AbstractTimeGeometricPrimitiveType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeInstantType">
      <class ref="net.opengis.gml.TimeInstantType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimePeriodType">
      <class ref="net.opengis.gml.TimePeriodType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimePositionType">
      <class ref="net.opengis.gml.TimePositionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeIntervalLengthType">
      <class ref="net.opengis.gml.TimeIntervalLengthType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractFeatureType">
      <class ref="net.opengis.gml.AbstractFeatureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BoundingShapeType">
      <class ref="net.opengis.gml.BoundingShapeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EnvelopeWithTimePeriodType">
      <class ref="net.opengis.gml.EnvelopeWithTimePeriodType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectionPropertyType">
      <class ref="net.opengis.gml.DirectionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DynamicFeatureType">
      <class ref="net.opengis.gml.DynamicFeatureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DynamicFeatureCollectionType">
      <class ref="net.opengis.gml.DynamicFeatureCollectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DynamicFeatureMemberType">
      <class ref="net.opengis.gml.DynamicFeatureMemberType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractTimeSliceType">
      <class ref="net.opengis.gml.AbstractTimeSliceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HistoryPropertyType">
      <class ref="net.opengis.gml.HistoryPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeometricComplexType">
      <class ref="net.opengis.gml.GeometricComplexType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CompositeCurveType">
      <class ref="net.opengis.gml.CompositeCurveType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CompositeSurfaceType">
      <class ref="net.opengis.gml.CompositeSurfaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CompositeSolidType">
      <class ref="net.opengis.gml.CompositeSolidType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractTopologyType">
      <class ref="net.opengis.gml.AbstractTopologyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractTopoPrimitiveType">
      <class ref="net.opengis.gml.AbstractTopoPrimitiveType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NodeType">
      <class ref="net.opengis.gml.NodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectedNodePropertyType">
      <class ref="net.opengis.gml.DirectedNodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EdgeType">
      <class ref="net.opengis.gml.EdgeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectedEdgePropertyType">
      <class ref="net.opengis.gml.DirectedEdgePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FaceType">
      <class ref="net.opengis.gml.FaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectedFacePropertyType">
      <class ref="net.opengis.gml.DirectedFacePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TopoSolidType">
      <class ref="net.opengis.gml.TopoSolidType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectedTopoSolidPropertyType">
      <class ref="net.opengis.gml.DirectedTopoSolidPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TopoPointType">
      <class ref="net.opengis.gml.TopoPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TopoPointPropertyType">
      <class ref="net.opengis.gml.TopoPointPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TopoCurveType">
      <class ref="net.opengis.gml.TopoCurveType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TopoCurvePropertyType">
      <class ref="net.opengis.gml.TopoCurvePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TopoSurfaceType">
      <class ref="net.opengis.gml.TopoSurfaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TopoSurfacePropertyType">
      <class ref="net.opengis.gml.TopoSurfacePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TopoVolumeType">
      <class ref="net.opengis.gml.TopoVolumeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TopoVolumePropertyType">
      <class ref="net.opengis.gml.TopoVolumePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TopoComplexType">
      <class ref="net.opengis.gml.TopoComplexType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TopoComplexPropertyType">
      <class ref="net.opengis.gml.TopoComplexPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TopoPrimitiveMemberType">
      <class ref="net.opengis.gml.TopoPrimitiveMemberType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TopoPrimitiveArrayAssociationType">
      <class ref="net.opengis.gml.TopoPrimitiveArrayAssociationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeOrNilReasonListType">
      <class ref="net.opengis.gml.CodeOrNilReasonListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MeasureOrNilReasonListType">
      <class ref="net.opengis.gml.MeasureOrNilReasonListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValuePropertyType">
      <class ref="net.opengis.gml.ValuePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValueArrayPropertyType">
      <class ref="net.opengis.gml.ValueArrayPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CompositeValueType">
      <class ref="net.opengis.gml.CompositeValueType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValueArrayType">
      <class ref="net.opengis.gml.ValueArrayType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CategoryExtentType">
      <class ref="net.opengis.gml.CategoryExtentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:QuantityExtentType">
      <class ref="net.opengis.gml.QuantityExtentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GridType">
      <class ref="net.opengis.gml.GridType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RectifiedGridType">
      <class ref="net.opengis.gml.RectifiedGridType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractCoverageType">
      <class ref="net.opengis.gml.AbstractCoverageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DiscreteCoverageType">
      <class ref="net.opengis.gml.DiscreteCoverageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractContinuousCoverageType">
      <class ref="net.opengis.gml.AbstractContinuousCoverageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DomainSetType">
      <class ref="net.opengis.gml.DomainSetType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RangeSetType">
      <class ref="net.opengis.gml.RangeSetType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DataBlockType">
      <class ref="net.opengis.gml.DataBlockType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CoordinatesType">
      <class ref="net.opengis.gml.CoordinatesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FileType">
      <class ref="net.opengis.gml.FileType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CoverageFunctionType">
      <class ref="net.opengis.gml.CoverageFunctionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MappingRuleType">
      <class ref="net.opengis.gml.MappingRuleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GridFunctionType">
      <class ref="net.opengis.gml.GridFunctionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractCRSType">
      <class ref="net.opengis.gml.AbstractCRSType"/>
    </bindings>
    <bindings if-exists="true" scd="tns:domainOfValidity">
      <class ref="net.opengis.gml.DomainOfValidity"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CoordinateSystemAxisType">
      <class ref="net.opengis.gml.CoordinateSystemAxisType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractCoordinateSystemType">
      <class ref="net.opengis.gml.AbstractCoordinateSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CoordinateSystemAxisPropertyType">
      <class ref="net.opengis.gml.CoordinateSystemAxisPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EllipsoidalCSType">
      <class ref="net.opengis.gml.EllipsoidalCSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CartesianCSType">
      <class ref="net.opengis.gml.CartesianCSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalCSType">
      <class ref="net.opengis.gml.VerticalCSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeCSType">
      <class ref="net.opengis.gml.TimeCSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LinearCSType">
      <class ref="net.opengis.gml.LinearCSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UserDefinedCSType">
      <class ref="net.opengis.gml.UserDefinedCSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SphericalCSType">
      <class ref="net.opengis.gml.SphericalCSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PolarCSType">
      <class ref="net.opengis.gml.PolarCSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CylindricalCSType">
      <class ref="net.opengis.gml.CylindricalCSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AffineCSType">
      <class ref="net.opengis.gml.AffineCSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractDatumType">
      <class ref="net.opengis.gml.AbstractDatumType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeodeticDatumType">
      <class ref="net.opengis.gml.GeodeticDatumType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PrimeMeridianPropertyType">
      <class ref="net.opengis.gml.PrimeMeridianPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EllipsoidPropertyType">
      <class ref="net.opengis.gml.EllipsoidPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EllipsoidType">
      <class ref="net.opengis.gml.EllipsoidType"/>
    </bindings>
    <bindings if-exists="true" scd="tns:secondDefiningParameter">
      <class ref="net.opengis.gml.AssociatedSecondDefiningParameter"/>
    </bindings>
    <bindings if-exists="true" scd="tns:SecondDefiningParameter">
      <class ref="net.opengis.gml.SecondDefiningParameter"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LengthType">
      <class ref="net.opengis.gml.LengthType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PrimeMeridianType">
      <class ref="net.opengis.gml.PrimeMeridianType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EngineeringDatumType">
      <class ref="net.opengis.gml.EngineeringDatumType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ImageDatumType">
      <class ref="net.opengis.gml.ImageDatumType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalDatumType">
      <class ref="net.opengis.gml.VerticalDatumType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TemporalDatumType">
      <class ref="net.opengis.gml.TemporalDatumType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractCoordinateOperationType">
      <class ref="net.opengis.gml.AbstractCoordinateOperationType"/>
    </bindings>
    <bindings if-exists="true" scd="tns:coordinateOperationAccuracy">
      <class ref="net.opengis.gml.CoordinateOperationAccuracy"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CRSPropertyType">
      <class ref="net.opengis.gml.CRSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractGeneralConversionType">
      <class ref="net.opengis.gml.AbstractGeneralConversionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractGeneralTransformationType">
      <class ref="net.opengis.gml.AbstractGeneralTransformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ConcatenatedOperationType">
      <class ref="net.opengis.gml.ConcatenatedOperationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CoordinateOperationPropertyType">
      <class ref="net.opengis.gml.CoordinateOperationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PassThroughOperationType">
      <class ref="net.opengis.gml.PassThroughOperationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ConversionType">
      <class ref="net.opengis.gml.ConversionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OperationMethodPropertyType">
      <class ref="net.opengis.gml.OperationMethodPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractGeneralParameterValuePropertyType">
      <class ref="net.opengis.gml.AbstractGeneralParameterValuePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TransformationType">
      <class ref="net.opengis.gml.TransformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractGeneralParameterValueType">
      <class ref="net.opengis.gml.AbstractGeneralParameterValueType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ParameterValueType">
      <class ref="net.opengis.gml.ParameterValueType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MeasureListType">
      <class ref="net.opengis.gml.MeasureListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OperationParameterPropertyType">
      <class ref="net.opengis.gml.OperationParameterPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ParameterValueGroupType">
      <class ref="net.opengis.gml.ParameterValueGroupType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OperationParameterGroupPropertyType">
      <class ref="net.opengis.gml.OperationParameterGroupPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OperationMethodType">
      <class ref="net.opengis.gml.OperationMethodType"/>
    </bindings>
    <bindings if-exists="true" scd="tns:formulaCitation">
      <class ref="net.opengis.gml.FormulaCitation"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractGeneralOperationParameterPropertyType">
      <class ref="net.opengis.gml.AbstractGeneralOperationParameterPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractGeneralOperationParameterType">
      <class ref="net.opengis.gml.AbstractGeneralOperationParameterType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OperationParameterType">
      <class ref="net.opengis.gml.OperationParameterType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OperationParameterGroupType">
      <class ref="net.opengis.gml.OperationParameterGroupType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractGeneralDerivedCRSType">
      <class ref="net.opengis.gml.AbstractGeneralDerivedCRSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeneralConversionPropertyType">
      <class ref="net.opengis.gml.GeneralConversionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CompoundCRSType">
      <class ref="net.opengis.gml.CompoundCRSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SingleCRSPropertyType">
      <class ref="net.opengis.gml.SingleCRSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeodeticCRSType">
      <class ref="net.opengis.gml.GeodeticCRSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EllipsoidalCSPropertyType">
      <class ref="net.opengis.gml.EllipsoidalCSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CartesianCSPropertyType">
      <class ref="net.opengis.gml.CartesianCSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SphericalCSPropertyType">
      <class ref="net.opengis.gml.SphericalCSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeodeticDatumPropertyType">
      <class ref="net.opengis.gml.GeodeticDatumPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalCRSType">
      <class ref="net.opengis.gml.VerticalCRSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalCSPropertyType">
      <class ref="net.opengis.gml.VerticalCSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalDatumPropertyType">
      <class ref="net.opengis.gml.VerticalDatumPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ProjectedCRSType">
      <class ref="net.opengis.gml.ProjectedCRSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeodeticCRSPropertyType">
      <class ref="net.opengis.gml.GeodeticCRSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DerivedCRSType">
      <class ref="net.opengis.gml.DerivedCRSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CoordinateSystemPropertyType">
      <class ref="net.opengis.gml.CoordinateSystemPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EngineeringCRSType">
      <class ref="net.opengis.gml.EngineeringCRSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CylindricalCSPropertyType">
      <class ref="net.opengis.gml.CylindricalCSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LinearCSPropertyType">
      <class ref="net.opengis.gml.LinearCSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PolarCSPropertyType">
      <class ref="net.opengis.gml.PolarCSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UserDefinedCSPropertyType">
      <class ref="net.opengis.gml.UserDefinedCSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EngineeringDatumPropertyType">
      <class ref="net.opengis.gml.EngineeringDatumPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ImageCRSType">
      <class ref="net.opengis.gml.ImageCRSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AffineCSPropertyType">
      <class ref="net.opengis.gml.AffineCSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ImageDatumPropertyType">
      <class ref="net.opengis.gml.ImageDatumPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TemporalCRSType">
      <class ref="net.opengis.gml.TemporalCRSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeCSPropertyType">
      <class ref="net.opengis.gml.TimeCSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TemporalDatumPropertyType">
      <class ref="net.opengis.gml.TemporalDatumPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ObservationType">
      <class ref="net.opengis.gml.ObservationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ProcedurePropertyType">
      <class ref="net.opengis.gml.ProcedurePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TargetPropertyType">
      <class ref="net.opengis.gml.TargetPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ResultType">
      <class ref="net.opengis.gml.ResultType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectedObservationType">
      <class ref="net.opengis.gml.DirectedObservationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectedObservationAtDistanceType">
      <class ref="net.opengis.gml.DirectedObservationAtDistanceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractTimeTopologyPrimitiveType">
      <class ref="net.opengis.gml.AbstractTimeTopologyPrimitiveType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeTopologyComplexType">
      <class ref="net.opengis.gml.TimeTopologyComplexType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeNodeType">
      <class ref="net.opengis.gml.TimeNodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeEdgeType">
      <class ref="net.opengis.gml.TimeEdgeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeReferenceSystemType">
      <class ref="net.opengis.gml.TimeReferenceSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeCoordinateSystemType">
      <class ref="net.opengis.gml.TimeCoordinateSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeCalendarType">
      <class ref="net.opengis.gml.TimeCalendarType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeCalendarEraType">
      <class ref="net.opengis.gml.TimeCalendarEraType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeClockType">
      <class ref="net.opengis.gml.TimeClockType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeOrdinalReferenceSystemType">
      <class ref="net.opengis.gml.TimeOrdinalReferenceSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeOrdinalEraType">
      <class ref="net.opengis.gml.TimeOrdinalEraType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DatumPropertyType">
      <class ref="net.opengis.gml.DatumPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SingleOperationPropertyType">
      <class ref="net.opengis.gml.SingleOperationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OperationPropertyType">
      <class ref="net.opengis.gml.OperationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeneralTransformationPropertyType">
      <class ref="net.opengis.gml.GeneralTransformationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ConcatenatedOperationPropertyType">
      <class ref="net.opengis.gml.ConcatenatedOperationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PassThroughOperationPropertyType">
      <class ref="net.opengis.gml.PassThroughOperationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ConversionPropertyType">
      <class ref="net.opengis.gml.ConversionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TransformationPropertyType">
      <class ref="net.opengis.gml.TransformationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DMSAngleType">
      <class ref="net.opengis.gml.DMSAngleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TemporalCSType">
      <class ref="net.opengis.gml.TemporalCSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TemporalCSPropertyType">
      <class ref="net.opengis.gml.TemporalCSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ObliqueCartesianCSType">
      <class ref="net.opengis.gml.ObliqueCartesianCSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ObliqueCartesianCSPropertyType">
      <class ref="net.opengis.gml.ObliqueCartesianCSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CompoundCRSPropertyType">
      <class ref="net.opengis.gml.CompoundCRSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalCRSPropertyType">
      <class ref="net.opengis.gml.VerticalCRSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeographicCRSPropertyType">
      <class ref="net.opengis.gml.GeographicCRSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ProjectedCRSPropertyType">
      <class ref="net.opengis.gml.ProjectedCRSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DerivedCRSPropertyType">
      <class ref="net.opengis.gml.DerivedCRSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EngineeringCRSPropertyType">
      <class ref="net.opengis.gml.EngineeringCRSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ImageCRSPropertyType">
      <class ref="net.opengis.gml.ImageCRSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TemporalCRSPropertyType">
      <class ref="net.opengis.gml.TemporalCRSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeographicCRSType">
      <class ref="net.opengis.gml.GeographicCRSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeocentricCRSType">
      <class ref="net.opengis.gml.GeocentricCRSType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeocentricCRSPropertyType">
      <class ref="net.opengis.gml.GeocentricCRSPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DegreesType">
      <class ref="net.opengis.gml.DegreesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrayAssociationType">
      <class ref="net.opengis.gml.ArrayAssociationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MetaDataPropertyType">
      <class ref="net.opengis.gml.MetaDataPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BagType">
      <class ref="net.opengis.gml.BagType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrayType">
      <class ref="net.opengis.gml.ArrayType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractMetaDataType">
      <class ref="net.opengis.gml.AbstractMetaDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GenericMetaDataType">
      <class ref="net.opengis.gml.GenericMetaDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LocationPropertyType">
      <class ref="net.opengis.gml.LocationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PriorityLocationPropertyType">
      <class ref="net.opengis.gml.PriorityLocationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FeaturePropertyType">
      <class ref="net.opengis.gml.FeaturePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FeatureArrayPropertyType">
      <class ref="net.opengis.gml.FeatureArrayPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractFeatureCollectionType">
      <class ref="net.opengis.gml.AbstractFeatureCollectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FeatureCollectionType">
      <class ref="net.opengis.gml.FeatureCollectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:IndirectEntryType">
      <class ref="net.opengis.gml.IndirectEntryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DefinitionProxyType">
      <class ref="net.opengis.gml.DefinitionProxyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MultiPointPropertyType">
      <class ref="net.opengis.gml.MultiPointPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MultiCurvePropertyType">
      <class ref="net.opengis.gml.MultiCurvePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MultiSurfacePropertyType">
      <class ref="net.opengis.gml.MultiSurfacePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MovingObjectStatusType">
      <class ref="net.opengis.gml.MovingObjectStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MultiSolidPropertyType">
      <class ref="net.opengis.gml.MultiSolidPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MultiGeometryPropertyType">
      <class ref="net.opengis.gml.MultiGeometryPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeListType">
      <class ref="net.opengis.gml.CodeListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractMemberType">
      <class ref="net.opengis.gml.AbstractMemberType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractMetadataPropertyType">
      <class ref="net.opengis.gml.AbstractMetadataPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DefinitionBaseType">
      <class ref="net.opengis.gml.DefinitionBaseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FormulaType">
      <class ref="net.opengis.gml.FormulaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ScaleType">
      <class ref="net.opengis.gml.ScaleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeType">
      <class ref="net.opengis.gml.TimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GridLengthType">
      <class ref="net.opengis.gml.GridLengthType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AreaType">
      <class ref="net.opengis.gml.AreaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VolumeType">
      <class ref="net.opengis.gml.VolumeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpeedType">
      <class ref="net.opengis.gml.SpeedType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeometricPrimitivePropertyType">
      <class ref="net.opengis.gml.GeometricPrimitivePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LinearRingPropertyType">
      <class ref="net.opengis.gml.LinearRingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:KnotType">
      <class ref="net.opengis.gml.KnotType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:KnotPropertyType">
      <class ref="net.opengis.gml.KnotPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RingPropertyType">
      <class ref="net.opengis.gml.RingPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LineStringSegmentArrayPropertyType">
      <class ref="net.opengis.gml.LineStringSegmentArrayPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ShellPropertyType">
      <class ref="net.opengis.gml.ShellPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RelatedTimeType">
      <class ref="net.opengis.gml.RelatedTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeInstantPropertyType">
      <class ref="net.opengis.gml.TimeInstantPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimePeriodPropertyType">
      <class ref="net.opengis.gml.TimePeriodPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractFeatureMemberType">
      <class ref="net.opengis.gml.AbstractFeatureMemberType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectionVectorType">
      <class ref="net.opengis.gml.DirectionVectorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectionDescriptionType">
      <class ref="net.opengis.gml.DirectionDescriptionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeometricComplexPropertyType">
      <class ref="net.opengis.gml.GeometricComplexPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NodeOrEdgePropertyType">
      <class ref="net.opengis.gml.NodeOrEdgePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NodePropertyType">
      <class ref="net.opengis.gml.NodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FaceOrTopoSolidPropertyType">
      <class ref="net.opengis.gml.FaceOrTopoSolidPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TopoSolidPropertyType">
      <class ref="net.opengis.gml.TopoSolidPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BooleanPropertyType">
      <class ref="net.opengis.gml.BooleanPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CategoryPropertyType">
      <class ref="net.opengis.gml.CategoryPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:QuantityPropertyType">
      <class ref="net.opengis.gml.QuantityPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CountPropertyType">
      <class ref="net.opengis.gml.CountPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GridLimitsType">
      <class ref="net.opengis.gml.GridLimitsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GridEnvelopeType">
      <class ref="net.opengis.gml.GridEnvelopeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SequenceRuleType">
      <class ref="net.opengis.gml.SequenceRuleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:IdentifiedObjectType">
      <class ref="net.opengis.gml.IdentifiedObjectType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TemporalDatumBaseType">
      <class ref="net.opengis.gml.TemporalDatumBaseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeTopologyPrimitivePropertyType">
      <class ref="net.opengis.gml.TimeTopologyPrimitivePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeTopologyComplexPropertyType">
      <class ref="net.opengis.gml.TimeTopologyComplexPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeNodePropertyType">
      <class ref="net.opengis.gml.TimeNodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeEdgePropertyType">
      <class ref="net.opengis.gml.TimeEdgePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeCalendarPropertyType">
      <class ref="net.opengis.gml.TimeCalendarPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeCalendarEraPropertyType">
      <class ref="net.opengis.gml.TimeCalendarEraPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeClockPropertyType">
      <class ref="net.opengis.gml.TimeClockPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeOrdinalEraPropertyType">
      <class ref="net.opengis.gml.TimeOrdinalEraPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AngleChoiceType">
      <class ref="net.opengis.gml.AngleChoiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BoundedFeatureType">
      <class ref="net.opengis.gml.BoundedFeatureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AggregationType">
      <typesafeEnumClass ref="net.opengis.gml.AggregationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CurveInterpolationType">
      <typesafeEnumClass ref="net.opengis.gml.CurveInterpolationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:KnotTypesType">
      <typesafeEnumClass ref="net.opengis.gml.KnotTypesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurfaceInterpolationType">
      <typesafeEnumClass ref="net.opengis.gml.SurfaceInterpolationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeIndeterminateValueType">
      <typesafeEnumClass ref="net.opengis.gml.TimeIndeterminateValueType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CompassPointEnumeration">
      <typesafeEnumClass ref="net.opengis.gml.CompassPointEnumeration"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SequenceRuleEnumeration">
      <typesafeEnumClass ref="net.opengis.gml.SequenceRuleEnumeration"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SuccessionType">
      <typesafeEnumClass ref="net.opengis.gml.SuccessionType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.opengis.net/fes/2.0" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="net.opengis.fes._2"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:TemporalOperandsType">
      <class ref="net.opengis.fes._2.TemporalOperandsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeometryOperandsType">
      <class ref="net.opengis.fes._2.GeometryOperandsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractAdhocQueryExpressionType">
      <class ref="net.opengis.fes._2.AbstractAdhocQueryExpressionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractQueryExpressionType">
      <class ref="net.opengis.fes._2.AbstractQueryExpressionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FunctionType">
      <class ref="net.opengis.fes._2.FunctionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LiteralType">
      <class ref="net.opengis.fes._2.LiteralType"/>
    </bindings>
    <bindings if-exists="true" scd="tns:Filter_Capabilities">
      <class ref="net.opengis.fes._2.FilterCapabilities"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ConformanceType">
      <class ref="net.opengis.fes._2.ConformanceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Id_CapabilitiesType">
      <class ref="net.opengis.fes._2.IdCapabilitiesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Scalar_CapabilitiesType">
      <class ref="net.opengis.fes._2.ScalarCapabilitiesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Spatial_CapabilitiesType">
      <class ref="net.opengis.fes._2.SpatialCapabilitiesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Temporal_CapabilitiesType">
      <class ref="net.opengis.fes._2.TemporalCapabilitiesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AvailableFunctionsType">
      <class ref="net.opengis.fes._2.AvailableFunctionsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Extended_CapabilitiesType">
      <class ref="net.opengis.fes._2.ExtendedCapabilitiesType"/>
    </bindings>
    <bindings if-exists="true" scd="tns:LogicalOperators">
      <class ref="net.opengis.fes._2.LogicalOperators"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FilterType">
      <class ref="net.opengis.fes._2.FilterType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ComparisonOpsType">
      <class ref="net.opengis.fes._2.ComparisonOpsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BinaryComparisonOpType">
      <class ref="net.opengis.fes._2.BinaryComparisonOpType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PropertyIsLikeType">
      <class ref="net.opengis.fes._2.PropertyIsLikeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PropertyIsNullType">
      <class ref="net.opengis.fes._2.PropertyIsNullType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PropertyIsNilType">
      <class ref="net.opengis.fes._2.PropertyIsNilType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PropertyIsBetweenType">
      <class ref="net.opengis.fes._2.PropertyIsBetweenType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpatialOpsType">
      <class ref="net.opengis.fes._2.SpatialOpsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BinarySpatialOpType">
      <class ref="net.opengis.fes._2.BinarySpatialOpType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DistanceBufferType">
      <class ref="net.opengis.fes._2.DistanceBufferType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BBOXType">
      <class ref="net.opengis.fes._2.BBOXType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TemporalOpsType">
      <class ref="net.opengis.fes._2.TemporalOpsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BinaryTemporalOpType">
      <class ref="net.opengis.fes._2.BinaryTemporalOpType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LogicOpsType">
      <class ref="net.opengis.fes._2.LogicOpsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BinaryLogicOpType">
      <class ref="net.opengis.fes._2.BinaryLogicOpType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnaryLogicOpType">
      <class ref="net.opengis.fes._2.UnaryLogicOpType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ExtensionOpsType">
      <class ref="net.opengis.fes._2.ExtensionOpsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractIdType">
      <class ref="net.opengis.fes._2.AbstractIdType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ResourceIdType">
      <class ref="net.opengis.fes._2.ResourceIdType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SortByType">
      <class ref="net.opengis.fes._2.SortByType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractProjectionClauseType">
      <class ref="net.opengis.fes._2.AbstractProjectionClauseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractSelectionClauseType">
      <class ref="net.opengis.fes._2.AbstractSelectionClauseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractSortingClauseType">
      <class ref="net.opengis.fes._2.AbstractSortingClauseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ResourceIdentifierType">
      <class ref="net.opengis.fes._2.ResourceIdentifierType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ComparisonOperatorsType">
      <class ref="net.opengis.fes._2.ComparisonOperatorsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ComparisonOperatorType">
      <class ref="net.opengis.fes._2.ComparisonOperatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AvailableFunctionType">
      <class ref="net.opengis.fes._2.AvailableFunctionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArgumentsType">
      <class ref="net.opengis.fes._2.ArgumentsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArgumentType">
      <class ref="net.opengis.fes._2.ArgumentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpatialOperatorsType">
      <class ref="net.opengis.fes._2.SpatialOperatorsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpatialOperatorType">
      <class ref="net.opengis.fes._2.SpatialOperatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TemporalOperatorsType">
      <class ref="net.opengis.fes._2.TemporalOperatorsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TemporalOperatorType">
      <class ref="net.opengis.fes._2.TemporalOperatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AdditionalOperatorsType">
      <class ref="net.opengis.fes._2.AdditionalOperatorsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ExtensionOperatorType">
      <class ref="net.opengis.fes._2.ExtensionOperatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LowerBoundaryType">
      <class ref="net.opengis.fes._2.LowerBoundaryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UpperBoundaryType">
      <class ref="net.opengis.fes._2.UpperBoundaryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MeasureType">
      <class ref="net.opengis.fes._2.MeasureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SortPropertyType">
      <class ref="net.opengis.fes._2.SortPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VersionActionTokens">
      <typesafeEnumClass ref="net.opengis.fes._2.VersionActionTokens"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MatchActionType">
      <typesafeEnumClass ref="net.opengis.fes._2.MatchActionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SortOrderType">
      <typesafeEnumClass ref="net.opengis.fes._2.SortOrderType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.opengis.net/wfs/2.0" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="net.opengis.wfs._2"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:FeatureTypeType">
      <class ref="net.opengis.wfs._2.FeatureTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PropertyType">
      <class ref="net.opengis.wfs._2.PropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:WFS_CapabilitiesType">
      <class ref="net.opengis.wfs._2.WFSCapabilitiesType"/>
    </bindings>
    <bindings if-exists="true" scd="tns:Title">
      <class ref="net.opengis.wfs._2.Title"/>
    </bindings>
    <bindings if-exists="true" scd="tns:Abstract">
      <class ref="net.opengis.wfs._2.Abstract"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:QueryType">
      <class ref="net.opengis.wfs._2.QueryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StoredQueryType">
      <class ref="net.opengis.wfs._2.StoredQueryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GetCapabilitiesType">
      <class ref="net.opengis.wfs._2.GetCapabilitiesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FeatureTypeListType">
      <class ref="net.opengis.wfs._2.FeatureTypeListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ElementType">
      <class ref="net.opengis.wfs._2.ElementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValueListType">
      <class ref="net.opengis.wfs._2.ValueListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DescribeFeatureTypeType">
      <class ref="net.opengis.wfs._2.DescribeFeatureTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GetPropertyValueType">
      <class ref="net.opengis.wfs._2.GetPropertyValueType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValueCollectionType">
      <class ref="net.opengis.wfs._2.ValueCollectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MemberPropertyType">
      <class ref="net.opengis.wfs._2.MemberPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TupleType">
      <class ref="net.opengis.wfs._2.TupleType"/>
    </bindings>
    <bindings if-exists="true" scd="tns:additionalValues">
      <class ref="net.opengis.wfs._2.AdditionalValues"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SimpleFeatureCollectionType">
      <class ref="net.opengis.wfs._2.SimpleFeatureCollectionType"/>
    </bindings>
    <bindings if-exists="true" scd="tns:truncatedResponse">
      <class ref="net.opengis.wfs._2.TruncatedResponse"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GetFeatureType">
      <class ref="net.opengis.wfs._2.GetFeatureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GetFeatureWithLockType">
      <class ref="net.opengis.wfs._2.GetFeatureWithLockType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FeatureCollectionType">
      <class ref="net.opengis.wfs._2.FeatureCollectionType"/>
    </bindings>
    <bindings if-exists="true" scd="tns:additionalObjects">
      <class ref="net.opengis.wfs._2.AdditionalObjects"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EnvelopePropertyType">
      <class ref="net.opengis.wfs._2.EnvelopePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ListStoredQueriesType">
      <class ref="net.opengis.wfs._2.ListStoredQueriesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ListStoredQueriesResponseType">
      <class ref="net.opengis.wfs._2.ListStoredQueriesResponseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DescribeStoredQueriesType">
      <class ref="net.opengis.wfs._2.DescribeStoredQueriesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DescribeStoredQueriesResponseType">
      <class ref="net.opengis.wfs._2.DescribeStoredQueriesResponseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CreateStoredQueryType">
      <class ref="net.opengis.wfs._2.CreateStoredQueryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CreateStoredQueryResponseType">
      <class ref="net.opengis.wfs._2.CreateStoredQueryResponseType"/>
    </bindings>
    <bindings if-exists="true" scd="tns:DropStoredQuery">
      <class ref="net.opengis.wfs._2.DropStoredQuery"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BaseRequestType">
      <class ref="net.opengis.wfs._2.BaseRequestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ExecutionStatusType">
      <class ref="net.opengis.wfs._2.ExecutionStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LockFeatureType">
      <class ref="net.opengis.wfs._2.LockFeatureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LockFeatureResponseType">
      <class ref="net.opengis.wfs._2.LockFeatureResponseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TransactionType">
      <class ref="net.opengis.wfs._2.TransactionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractTransactionActionType">
      <class ref="net.opengis.wfs._2.AbstractTransactionActionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InsertType">
      <class ref="net.opengis.wfs._2.InsertType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UpdateType">
      <class ref="net.opengis.wfs._2.UpdateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ReplaceType">
      <class ref="net.opengis.wfs._2.ReplaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DeleteType">
      <class ref="net.opengis.wfs._2.DeleteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NativeType">
      <class ref="net.opengis.wfs._2.NativeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TransactionResponseType">
      <class ref="net.opengis.wfs._2.TransactionResponseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ParameterType">
      <class ref="net.opengis.wfs._2.ParameterType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OutputFormatListType">
      <class ref="net.opengis.wfs._2.OutputFormatListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MetadataURLType">
      <class ref="net.opengis.wfs._2.MetadataURLType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ExtendedDescriptionType">
      <class ref="net.opengis.wfs._2.ExtendedDescriptionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StoredQueryListItemType">
      <class ref="net.opengis.wfs._2.StoredQueryListItemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StoredQueryDescriptionType">
      <class ref="net.opengis.wfs._2.StoredQueryDescriptionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ParameterExpressionType">
      <class ref="net.opengis.wfs._2.ParameterExpressionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:QueryExpressionTextType">
      <class ref="net.opengis.wfs._2.QueryExpressionTextType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FeaturesLockedType">
      <class ref="net.opengis.wfs._2.FeaturesLockedType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FeaturesNotLockedType">
      <class ref="net.opengis.wfs._2.FeaturesNotLockedType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TransactionSummaryType">
      <class ref="net.opengis.wfs._2.TransactionSummaryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ActionResultsType">
      <class ref="net.opengis.wfs._2.ActionResultsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CreatedOrModifiedFeatureType">
      <class ref="net.opengis.wfs._2.CreatedOrModifiedFeatureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EmptyType">
      <class ref="net.opengis.wfs._2.EmptyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ResultTypeType">
      <typesafeEnumClass ref="net.opengis.wfs._2.ResultTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ResolveValueType">
      <typesafeEnumClass ref="net.opengis.wfs._2.ResolveValueType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AllSomeType">
      <typesafeEnumClass ref="net.opengis.wfs._2.AllSomeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UpdateActionType">
      <typesafeEnumClass ref="net.opengis.wfs._2.UpdateActionType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.opengis.net/ows/1.1" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="net.opengis.ows._1"/>
    </schemaBindings>
    <bindings if-exists="true" scd="tns:ExceptionReport">
      <class ref="net.opengis.ows._1.ExceptionReport"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ExceptionType">
      <class ref="net.opengis.ows._1.ExceptionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MetadataType">
      <class ref="net.opengis.ows._1.MetadataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BoundingBoxType">
      <class ref="net.opengis.ows._1.BoundingBoxType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:WGS84BoundingBoxType">
      <class ref="net.opengis.ows._1.WGS84BoundingBoxType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LanguageStringType">
      <class ref="net.opengis.ows._1.LanguageStringType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:KeywordsType">
      <class ref="net.opengis.ows._1.KeywordsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ResponsiblePartyType">
      <class ref="net.opengis.ows._1.ResponsiblePartyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CodeType">
      <class ref="net.opengis.ows._1.CodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ContactType">
      <class ref="net.opengis.ows._1.ContactType"/>
    </bindings>
    <bindings if-exists="true" scd="tns:ServiceIdentification">
      <class ref="net.opengis.ows._1.ServiceIdentification"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DescriptionType">
      <class ref="net.opengis.ows._1.DescriptionType"/>
    </bindings>
    <bindings if-exists="true" scd="tns:ServiceProvider">
      <class ref="net.opengis.ows._1.ServiceProvider"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OnlineResourceType">
      <class ref="net.opengis.ows._1.OnlineResourceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ResponsiblePartySubsetType">
      <class ref="net.opengis.ows._1.ResponsiblePartySubsetType"/>
    </bindings>
    <bindings if-exists="true" scd="tns:AnyValue">
      <class ref="net.opengis.ows._1.AnyValue"/>
    </bindings>
    <bindings if-exists="true" scd="tns:NoValues">
      <class ref="net.opengis.ows._1.NoValues"/>
    </bindings>
    <bindings if-exists="true" scd="tns:ValuesReference">
      <class ref="net.opengis.ows._1.ValuesReference"/>
    </bindings>
    <bindings if-exists="true" scd="tns:AllowedValues">
      <class ref="net.opengis.ows._1.AllowedValues"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ValueType">
      <class ref="net.opengis.ows._1.ValueType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RangeType">
      <class ref="net.opengis.ows._1.RangeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DomainMetadataType">
      <class ref="net.opengis.ows._1.DomainMetadataType"/>
    </bindings>
    <bindings if-exists="true" scd="tns:OperationsMetadata">
      <class ref="net.opengis.ows._1.OperationsMetadata"/>
    </bindings>
    <bindings if-exists="true" scd="tns:Operation">
      <class ref="net.opengis.ows._1.Operation"/>
    </bindings>
    <bindings if-exists="true" scd="tns:DCP">
      <class ref="net.opengis.ows._1.DCP"/>
    </bindings>
    <bindings if-exists="true" scd="tns:HTTP">
      <class ref="net.opengis.ows._1.HTTP"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RequestMethodType">
      <class ref="net.opengis.ows._1.RequestMethodType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DomainType">
      <class ref="net.opengis.ows._1.DomainType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GetCapabilitiesType">
      <class ref="net.opengis.ows._1.GetCapabilitiesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GetResourceByIdType">
      <class ref="net.opengis.ows._1.GetResourceByIdType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DatasetDescriptionSummaryBaseType">
      <class ref="net.opengis.ows._1.DatasetDescriptionSummaryBaseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractReferenceBaseType">
      <class ref="net.opengis.ows._1.AbstractReferenceBaseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ReferenceType">
      <class ref="net.opengis.ows._1.ReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ReferenceGroupType">
      <class ref="net.opengis.ows._1.ReferenceGroupType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ManifestType">
      <class ref="net.opengis.ows._1.ManifestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ServiceReferenceType">
      <class ref="net.opengis.ows._1.ServiceReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TelephoneType">
      <class ref="net.opengis.ows._1.TelephoneType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AddressType">
      <class ref="net.opengis.ows._1.AddressType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BasicIdentificationType">
      <class ref="net.opengis.ows._1.BasicIdentificationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:IdentificationType">
      <class ref="net.opengis.ows._1.IdentificationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnNamedDomainType">
      <class ref="net.opengis.ows._1.UnNamedDomainType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CapabilitiesBaseType">
      <class ref="net.opengis.ows._1.CapabilitiesBaseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AcceptVersionsType">
      <class ref="net.opengis.ows._1.AcceptVersionsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SectionsType">
      <class ref="net.opengis.ows._1.SectionsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AcceptFormatsType">
      <class ref="net.opengis.ows._1.AcceptFormatsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ContentsBaseType">
      <class ref="net.opengis.ows._1.ContentsBaseType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.w3.org/1999/xlink" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="org.w3.xlink.v1999"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:titleEltType">
      <class ref="org.w3.xlink.v1999.TitleEltType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:resourceType">
      <class ref="org.w3.xlink.v1999.ResourceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:locatorType">
      <class ref="org.w3.xlink.v1999.LocatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:arcType">
      <class ref="org.w3.xlink.v1999.ArcType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:simple">
      <class ref="org.w3.xlink.v1999.Simple"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:extended">
      <class ref="org.w3.xlink.v1999.Extended"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:typeType">
      <typesafeEnumClass ref="org.w3.xlink.v1999.TypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:showType">
      <typesafeEnumClass ref="org.w3.xlink.v1999.ShowType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:actuateType">
      <typesafeEnumClass ref="org.w3.xlink.v1999.ActuateType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.isotc211.org/2005/gmd" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="org.isotc211.gmd"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:EX_Extent_Type">
      <class ref="org.isotc211.gmd.EXExtentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractDQ_PositionalAccuracy_Type">
      <class ref="org.isotc211.gmd.AbstractDQPositionalAccuracyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractDQ_Element_Type">
      <class ref="org.isotc211.gmd.AbstractDQElementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_Citation_Type">
      <class ref="org.isotc211.gmd.CICitationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EX_TemporalExtent_Type">
      <class ref="org.isotc211.gmd.EXTemporalExtentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EX_VerticalExtent_Type">
      <class ref="org.isotc211.gmd.EXVerticalExtentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EX_BoundingPolygon_Type">
      <class ref="org.isotc211.gmd.EXBoundingPolygonType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractEX_GeographicExtent_Type">
      <class ref="org.isotc211.gmd.AbstractEXGeographicExtentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EX_GeographicBoundingBox_Type">
      <class ref="org.isotc211.gmd.EXGeographicBoundingBoxType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EX_SpatialTemporalExtent_Type">
      <class ref="org.isotc211.gmd.EXSpatialTemporalExtentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EX_GeographicDescription_Type">
      <class ref="org.isotc211.gmd.EXGeographicDescriptionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RS_Identifier_Type">
      <class ref="org.isotc211.gmd.RSIdentifierType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Identifier_Type">
      <class ref="org.isotc211.gmd.MDIdentifierType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ReferenceSystem_Type">
      <class ref="org.isotc211.gmd.MDReferenceSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractRS_ReferenceSystem_Type">
      <class ref="org.isotc211.gmd.AbstractRSReferenceSystemType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_ResponsibleParty_Type">
      <class ref="org.isotc211.gmd.CIResponsiblePartyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_Address_Type">
      <class ref="org.isotc211.gmd.CIAddressType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_OnlineResource_Type">
      <class ref="org.isotc211.gmd.CIOnlineResourceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_Contact_Type">
      <class ref="org.isotc211.gmd.CIContactType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_Telephone_Type">
      <class ref="org.isotc211.gmd.CITelephoneType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_Date_Type">
      <class ref="org.isotc211.gmd.CIDateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_Series_Type">
      <class ref="org.isotc211.gmd.CISeriesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_GridSpatialRepresentation_Type">
      <class ref="org.isotc211.gmd.MDGridSpatialRepresentationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractMD_SpatialRepresentation_Type">
      <class ref="org.isotc211.gmd.AbstractMDSpatialRepresentationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_VectorSpatialRepresentation_Type">
      <class ref="org.isotc211.gmd.MDVectorSpatialRepresentationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Georeferenceable_Type">
      <class ref="org.isotc211.gmd.MDGeoreferenceableType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Dimension_Type">
      <class ref="org.isotc211.gmd.MDDimensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Georectified_Type">
      <class ref="org.isotc211.gmd.MDGeorectifiedType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_GeometricObjects_Type">
      <class ref="org.isotc211.gmd.MDGeometricObjectsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ExtendedElementInformation_Type">
      <class ref="org.isotc211.gmd.MDExtendedElementInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_MetadataExtensionInformation_Type">
      <class ref="org.isotc211.gmd.MDMetadataExtensionInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_FeatureCatalogueDescription_Type">
      <class ref="org.isotc211.gmd.MDFeatureCatalogueDescriptionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractMD_ContentInformation_Type">
      <class ref="org.isotc211.gmd.AbstractMDContentInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_CoverageDescription_Type">
      <class ref="org.isotc211.gmd.MDCoverageDescriptionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ImageDescription_Type">
      <class ref="org.isotc211.gmd.MDImageDescriptionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_RangeDimension_Type">
      <class ref="org.isotc211.gmd.MDRangeDimensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Band_Type">
      <class ref="org.isotc211.gmd.MDBandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ApplicationSchemaInformation_Type">
      <class ref="org.isotc211.gmd.MDApplicationSchemaInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_PortrayalCatalogueReference_Type">
      <class ref="org.isotc211.gmd.MDPortrayalCatalogueReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Constraints_Type">
      <class ref="org.isotc211.gmd.MDConstraintsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_LegalConstraints_Type">
      <class ref="org.isotc211.gmd.MDLegalConstraintsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_SecurityConstraints_Type">
      <class ref="org.isotc211.gmd.MDSecurityConstraintsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Medium_Type">
      <class ref="org.isotc211.gmd.MDMediumType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_DigitalTransferOptions_Type">
      <class ref="org.isotc211.gmd.MDDigitalTransferOptionsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_StandardOrderProcess_Type">
      <class ref="org.isotc211.gmd.MDStandardOrderProcessType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Distributor_Type">
      <class ref="org.isotc211.gmd.MDDistributorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Distribution_Type">
      <class ref="org.isotc211.gmd.MDDistributionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Format_Type">
      <class ref="org.isotc211.gmd.MDFormatType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_MaintenanceInformation_Type">
      <class ref="org.isotc211.gmd.MDMaintenanceInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ScopeDescription_Type">
      <class ref="org.isotc211.gmd.MDScopeDescriptionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractMD_Identification_Type">
      <class ref="org.isotc211.gmd.AbstractMDIdentificationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_BrowseGraphic_Type">
      <class ref="org.isotc211.gmd.MDBrowseGraphicType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_DataIdentification_Type">
      <class ref="org.isotc211.gmd.MDDataIdentificationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ServiceIdentification_Type">
      <class ref="org.isotc211.gmd.MDServiceIdentificationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_RepresentativeFraction_Type">
      <class ref="org.isotc211.gmd.MDRepresentativeFractionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Usage_Type">
      <class ref="org.isotc211.gmd.MDUsageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Keywords_Type">
      <class ref="org.isotc211.gmd.MDKeywordsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_Association_Type">
      <class ref="org.isotc211.gmd.DSAssociationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_AggregateInformation_Type">
      <class ref="org.isotc211.gmd.MDAggregateInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Resolution_Type">
      <class ref="org.isotc211.gmd.MDResolutionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LI_ProcessStep_Type">
      <class ref="org.isotc211.gmd.LIProcessStepType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LI_Source_Type">
      <class ref="org.isotc211.gmd.LISourceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LI_Lineage_Type">
      <class ref="org.isotc211.gmd.LILineageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_ConformanceResult_Type">
      <class ref="org.isotc211.gmd.DQConformanceResultType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractDQ_Result_Type">
      <class ref="org.isotc211.gmd.AbstractDQResultType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_QuantitativeResult_Type">
      <class ref="org.isotc211.gmd.DQQuantitativeResultType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_TemporalValidity_Type">
      <class ref="org.isotc211.gmd.DQTemporalValidityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractDQ_TemporalAccuracy_Type">
      <class ref="org.isotc211.gmd.AbstractDQTemporalAccuracyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_TemporalConsistency_Type">
      <class ref="org.isotc211.gmd.DQTemporalConsistencyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_AccuracyOfATimeMeasurement_Type">
      <class ref="org.isotc211.gmd.DQAccuracyOfATimeMeasurementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_QuantitativeAttributeAccuracy_Type">
      <class ref="org.isotc211.gmd.DQQuantitativeAttributeAccuracyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractDQ_ThematicAccuracy_Type">
      <class ref="org.isotc211.gmd.AbstractDQThematicAccuracyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_NonQuantitativeAttributeAccuracy_Type">
      <class ref="org.isotc211.gmd.DQNonQuantitativeAttributeAccuracyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_ThematicClassificationCorrectness_Type">
      <class ref="org.isotc211.gmd.DQThematicClassificationCorrectnessType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_RelativeInternalPositionalAccuracy_Type">
      <class ref="org.isotc211.gmd.DQRelativeInternalPositionalAccuracyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_GriddedDataPositionalAccuracy_Type">
      <class ref="org.isotc211.gmd.DQGriddedDataPositionalAccuracyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_AbsoluteExternalPositionalAccuracy_Type">
      <class ref="org.isotc211.gmd.DQAbsoluteExternalPositionalAccuracyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_TopologicalConsistency_Type">
      <class ref="org.isotc211.gmd.DQTopologicalConsistencyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractDQ_LogicalConsistency_Type">
      <class ref="org.isotc211.gmd.AbstractDQLogicalConsistencyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_FormatConsistency_Type">
      <class ref="org.isotc211.gmd.DQFormatConsistencyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_DomainConsistency_Type">
      <class ref="org.isotc211.gmd.DQDomainConsistencyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_ConceptualConsistency_Type">
      <class ref="org.isotc211.gmd.DQConceptualConsistencyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_CompletenessOmission_Type">
      <class ref="org.isotc211.gmd.DQCompletenessOmissionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractDQ_Completeness_Type">
      <class ref="org.isotc211.gmd.AbstractDQCompletenessType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_CompletenessCommission_Type">
      <class ref="org.isotc211.gmd.DQCompletenessCommissionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_DataQuality_Type">
      <class ref="org.isotc211.gmd.DQDataQualityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_Scope_Type">
      <class ref="org.isotc211.gmd.DQScopeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PT_FreeText_Type">
      <class ref="org.isotc211.gmd.PTFreeTextType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PT_Locale_Type">
      <class ref="org.isotc211.gmd.PTLocaleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LocalisedCharacterString_Type">
      <class ref="org.isotc211.gmd.LocalisedCharacterStringType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PT_LocaleContainer_Type">
      <class ref="org.isotc211.gmd.PTLocaleContainerType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Metadata_Type">
      <class ref="org.isotc211.gmd.MDMetadataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractDS_Aggregate_Type">
      <class ref="org.isotc211.gmd.AbstractDSAggregateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_DataSet_Type">
      <class ref="org.isotc211.gmd.DSDataSetType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_OtherAggregate_Type">
      <class ref="org.isotc211.gmd.DSOtherAggregateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_Series_Type">
      <class ref="org.isotc211.gmd.DSSeriesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_Initiative_Type">
      <class ref="org.isotc211.gmd.DSInitiativeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_Platform_Type">
      <class ref="org.isotc211.gmd.DSPlatformType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_Sensor_Type">
      <class ref="org.isotc211.gmd.DSSensorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_ProductionSeries_Type">
      <class ref="org.isotc211.gmd.DSProductionSeriesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_StereoMate_Type">
      <class ref="org.isotc211.gmd.DSStereoMateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EX_TemporalExtent_PropertyType">
      <class ref="org.isotc211.gmd.EXTemporalExtentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EX_VerticalExtent_PropertyType">
      <class ref="org.isotc211.gmd.EXVerticalExtentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EX_BoundingPolygon_PropertyType">
      <class ref="org.isotc211.gmd.EXBoundingPolygonPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EX_Extent_PropertyType">
      <class ref="org.isotc211.gmd.EXExtentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EX_GeographicExtent_PropertyType">
      <class ref="org.isotc211.gmd.EXGeographicExtentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EX_GeographicBoundingBox_PropertyType">
      <class ref="org.isotc211.gmd.EXGeographicBoundingBoxPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EX_SpatialTemporalExtent_PropertyType">
      <class ref="org.isotc211.gmd.EXSpatialTemporalExtentPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EX_GeographicDescription_PropertyType">
      <class ref="org.isotc211.gmd.EXGeographicDescriptionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RS_Identifier_PropertyType">
      <class ref="org.isotc211.gmd.RSIdentifierPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ReferenceSystem_PropertyType">
      <class ref="org.isotc211.gmd.MDReferenceSystemPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Identifier_PropertyType">
      <class ref="org.isotc211.gmd.MDIdentifierPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RS_ReferenceSystem_PropertyType">
      <class ref="org.isotc211.gmd.RSReferenceSystemPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_ResponsibleParty_PropertyType">
      <class ref="org.isotc211.gmd.CIResponsiblePartyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_Citation_PropertyType">
      <class ref="org.isotc211.gmd.CICitationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_Address_PropertyType">
      <class ref="org.isotc211.gmd.CIAddressPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_OnlineResource_PropertyType">
      <class ref="org.isotc211.gmd.CIOnlineResourcePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_Contact_PropertyType">
      <class ref="org.isotc211.gmd.CIContactPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_Telephone_PropertyType">
      <class ref="org.isotc211.gmd.CITelephonePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_Date_PropertyType">
      <class ref="org.isotc211.gmd.CIDatePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_Series_PropertyType">
      <class ref="org.isotc211.gmd.CISeriesPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:URL_PropertyType">
      <class ref="org.isotc211.gmd.URLPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_RoleCode_PropertyType">
      <class ref="org.isotc211.gmd.CIRoleCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_PresentationFormCode_PropertyType">
      <class ref="org.isotc211.gmd.CIPresentationFormCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_OnLineFunctionCode_PropertyType">
      <class ref="org.isotc211.gmd.CIOnLineFunctionCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CI_DateTypeCode_PropertyType">
      <class ref="org.isotc211.gmd.CIDateTypeCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_GridSpatialRepresentation_PropertyType">
      <class ref="org.isotc211.gmd.MDGridSpatialRepresentationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_VectorSpatialRepresentation_PropertyType">
      <class ref="org.isotc211.gmd.MDVectorSpatialRepresentationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_SpatialRepresentation_PropertyType">
      <class ref="org.isotc211.gmd.MDSpatialRepresentationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Georeferenceable_PropertyType">
      <class ref="org.isotc211.gmd.MDGeoreferenceablePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Dimension_PropertyType">
      <class ref="org.isotc211.gmd.MDDimensionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Georectified_PropertyType">
      <class ref="org.isotc211.gmd.MDGeorectifiedPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_GeometricObjects_PropertyType">
      <class ref="org.isotc211.gmd.MDGeometricObjectsPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_PixelOrientationCode_PropertyType">
      <class ref="org.isotc211.gmd.MDPixelOrientationCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_TopologyLevelCode_PropertyType">
      <class ref="org.isotc211.gmd.MDTopologyLevelCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_GeometricObjectTypeCode_PropertyType">
      <class ref="org.isotc211.gmd.MDGeometricObjectTypeCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_CellGeometryCode_PropertyType">
      <class ref="org.isotc211.gmd.MDCellGeometryCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_DimensionNameTypeCode_PropertyType">
      <class ref="org.isotc211.gmd.MDDimensionNameTypeCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ExtendedElementInformation_PropertyType">
      <class ref="org.isotc211.gmd.MDExtendedElementInformationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_MetadataExtensionInformation_PropertyType">
      <class ref="org.isotc211.gmd.MDMetadataExtensionInformationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ObligationCode_PropertyType">
      <class ref="org.isotc211.gmd.MDObligationCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_DatatypeCode_PropertyType">
      <class ref="org.isotc211.gmd.MDDatatypeCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_FeatureCatalogueDescription_PropertyType">
      <class ref="org.isotc211.gmd.MDFeatureCatalogueDescriptionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_CoverageDescription_PropertyType">
      <class ref="org.isotc211.gmd.MDCoverageDescriptionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ImageDescription_PropertyType">
      <class ref="org.isotc211.gmd.MDImageDescriptionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ContentInformation_PropertyType">
      <class ref="org.isotc211.gmd.MDContentInformationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_RangeDimension_PropertyType">
      <class ref="org.isotc211.gmd.MDRangeDimensionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Band_PropertyType">
      <class ref="org.isotc211.gmd.MDBandPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_CoverageContentTypeCode_PropertyType">
      <class ref="org.isotc211.gmd.MDCoverageContentTypeCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ImagingConditionCode_PropertyType">
      <class ref="org.isotc211.gmd.MDImagingConditionCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ApplicationSchemaInformation_PropertyType">
      <class ref="org.isotc211.gmd.MDApplicationSchemaInformationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_PortrayalCatalogueReference_PropertyType">
      <class ref="org.isotc211.gmd.MDPortrayalCatalogueReferencePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Constraints_PropertyType">
      <class ref="org.isotc211.gmd.MDConstraintsPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_LegalConstraints_PropertyType">
      <class ref="org.isotc211.gmd.MDLegalConstraintsPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_SecurityConstraints_PropertyType">
      <class ref="org.isotc211.gmd.MDSecurityConstraintsPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ClassificationCode_PropertyType">
      <class ref="org.isotc211.gmd.MDClassificationCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_RestrictionCode_PropertyType">
      <class ref="org.isotc211.gmd.MDRestrictionCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Medium_PropertyType">
      <class ref="org.isotc211.gmd.MDMediumPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_DigitalTransferOptions_PropertyType">
      <class ref="org.isotc211.gmd.MDDigitalTransferOptionsPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_StandardOrderProcess_PropertyType">
      <class ref="org.isotc211.gmd.MDStandardOrderProcessPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Distributor_PropertyType">
      <class ref="org.isotc211.gmd.MDDistributorPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Distribution_PropertyType">
      <class ref="org.isotc211.gmd.MDDistributionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Format_PropertyType">
      <class ref="org.isotc211.gmd.MDFormatPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_DistributionUnits_PropertyType">
      <class ref="org.isotc211.gmd.MDDistributionUnitsPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_MediumFormatCode_PropertyType">
      <class ref="org.isotc211.gmd.MDMediumFormatCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_MediumNameCode_PropertyType">
      <class ref="org.isotc211.gmd.MDMediumNameCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_MaintenanceInformation_PropertyType">
      <class ref="org.isotc211.gmd.MDMaintenanceInformationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ScopeDescription_PropertyType">
      <class ref="org.isotc211.gmd.MDScopeDescriptionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_MaintenanceFrequencyCode_PropertyType">
      <class ref="org.isotc211.gmd.MDMaintenanceFrequencyCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ScopeCode_PropertyType">
      <class ref="org.isotc211.gmd.MDScopeCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Identification_PropertyType">
      <class ref="org.isotc211.gmd.MDIdentificationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_BrowseGraphic_PropertyType">
      <class ref="org.isotc211.gmd.MDBrowseGraphicPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_DataIdentification_PropertyType">
      <class ref="org.isotc211.gmd.MDDataIdentificationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ServiceIdentification_PropertyType">
      <class ref="org.isotc211.gmd.MDServiceIdentificationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_RepresentativeFraction_PropertyType">
      <class ref="org.isotc211.gmd.MDRepresentativeFractionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Usage_PropertyType">
      <class ref="org.isotc211.gmd.MDUsagePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Keywords_PropertyType">
      <class ref="org.isotc211.gmd.MDKeywordsPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_Association_PropertyType">
      <class ref="org.isotc211.gmd.DSAssociationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_AggregateInformation_PropertyType">
      <class ref="org.isotc211.gmd.MDAggregateInformationPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Resolution_PropertyType">
      <class ref="org.isotc211.gmd.MDResolutionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_TopicCategoryCode_PropertyType">
      <class ref="org.isotc211.gmd.MDTopicCategoryCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_CharacterSetCode_PropertyType">
      <class ref="org.isotc211.gmd.MDCharacterSetCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_SpatialRepresentationTypeCode_PropertyType">
      <class ref="org.isotc211.gmd.MDSpatialRepresentationTypeCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ProgressCode_PropertyType">
      <class ref="org.isotc211.gmd.MDProgressCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_KeywordTypeCode_PropertyType">
      <class ref="org.isotc211.gmd.MDKeywordTypeCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_AssociationTypeCode_PropertyType">
      <class ref="org.isotc211.gmd.DSAssociationTypeCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_InitiativeTypeCode_PropertyType">
      <class ref="org.isotc211.gmd.DSInitiativeTypeCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LI_ProcessStep_PropertyType">
      <class ref="org.isotc211.gmd.LIProcessStepPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LI_Source_PropertyType">
      <class ref="org.isotc211.gmd.LISourcePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LI_Lineage_PropertyType">
      <class ref="org.isotc211.gmd.LILineagePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_ConformanceResult_PropertyType">
      <class ref="org.isotc211.gmd.DQConformanceResultPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_QuantitativeResult_PropertyType">
      <class ref="org.isotc211.gmd.DQQuantitativeResultPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_Result_PropertyType">
      <class ref="org.isotc211.gmd.DQResultPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_TemporalValidity_PropertyType">
      <class ref="org.isotc211.gmd.DQTemporalValidityPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_TemporalConsistency_PropertyType">
      <class ref="org.isotc211.gmd.DQTemporalConsistencyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_AccuracyOfATimeMeasurement_PropertyType">
      <class ref="org.isotc211.gmd.DQAccuracyOfATimeMeasurementPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_QuantitativeAttributeAccuracy_PropertyType">
      <class ref="org.isotc211.gmd.DQQuantitativeAttributeAccuracyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_NonQuantitativeAttributeAccuracy_PropertyType">
      <class ref="org.isotc211.gmd.DQNonQuantitativeAttributeAccuracyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_ThematicClassificationCorrectness_PropertyType">
      <class ref="org.isotc211.gmd.DQThematicClassificationCorrectnessPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_RelativeInternalPositionalAccuracy_PropertyType">
      <class ref="org.isotc211.gmd.DQRelativeInternalPositionalAccuracyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_GriddedDataPositionalAccuracy_PropertyType">
      <class ref="org.isotc211.gmd.DQGriddedDataPositionalAccuracyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_AbsoluteExternalPositionalAccuracy_PropertyType">
      <class ref="org.isotc211.gmd.DQAbsoluteExternalPositionalAccuracyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_TopologicalConsistency_PropertyType">
      <class ref="org.isotc211.gmd.DQTopologicalConsistencyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_FormatConsistency_PropertyType">
      <class ref="org.isotc211.gmd.DQFormatConsistencyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_DomainConsistency_PropertyType">
      <class ref="org.isotc211.gmd.DQDomainConsistencyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_ConceptualConsistency_PropertyType">
      <class ref="org.isotc211.gmd.DQConceptualConsistencyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_CompletenessOmission_PropertyType">
      <class ref="org.isotc211.gmd.DQCompletenessOmissionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_CompletenessCommission_PropertyType">
      <class ref="org.isotc211.gmd.DQCompletenessCommissionPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_TemporalAccuracy_PropertyType">
      <class ref="org.isotc211.gmd.DQTemporalAccuracyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_ThematicAccuracy_PropertyType">
      <class ref="org.isotc211.gmd.DQThematicAccuracyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_PositionalAccuracy_PropertyType">
      <class ref="org.isotc211.gmd.DQPositionalAccuracyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_LogicalConsistency_PropertyType">
      <class ref="org.isotc211.gmd.DQLogicalConsistencyPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_Completeness_PropertyType">
      <class ref="org.isotc211.gmd.DQCompletenessPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_Element_PropertyType">
      <class ref="org.isotc211.gmd.DQElementPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_DataQuality_PropertyType">
      <class ref="org.isotc211.gmd.DQDataQualityPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_Scope_PropertyType">
      <class ref="org.isotc211.gmd.DQScopePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DQ_EvaluationMethodTypeCode_PropertyType">
      <class ref="org.isotc211.gmd.DQEvaluationMethodTypeCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PT_FreeText_PropertyType">
      <class ref="org.isotc211.gmd.PTFreeTextPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PT_Locale_PropertyType">
      <class ref="org.isotc211.gmd.PTLocalePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LocalisedCharacterString_PropertyType">
      <class ref="org.isotc211.gmd.LocalisedCharacterStringPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PT_LocaleContainer_PropertyType">
      <class ref="org.isotc211.gmd.PTLocaleContainerPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LanguageCode_PropertyType">
      <class ref="org.isotc211.gmd.LanguageCodePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Country_PropertyType">
      <class ref="org.isotc211.gmd.CountryPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_Metadata_PropertyType">
      <class ref="org.isotc211.gmd.MDMetadataPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_Aggregate_PropertyType">
      <class ref="org.isotc211.gmd.DSAggregatePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_DataSet_PropertyType">
      <class ref="org.isotc211.gmd.DSDataSetPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_OtherAggregate_PropertyType">
      <class ref="org.isotc211.gmd.DSOtherAggregatePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_Series_PropertyType">
      <class ref="org.isotc211.gmd.DSSeriesPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_Initiative_PropertyType">
      <class ref="org.isotc211.gmd.DSInitiativePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_Platform_PropertyType">
      <class ref="org.isotc211.gmd.DSPlatformPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_Sensor_PropertyType">
      <class ref="org.isotc211.gmd.DSSensorPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_ProductionSeries_PropertyType">
      <class ref="org.isotc211.gmd.DSProductionSeriesPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DS_StereoMate_PropertyType">
      <class ref="org.isotc211.gmd.DSStereoMatePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_PixelOrientationCode_Type">
      <typesafeEnumClass ref="org.isotc211.gmd.MDPixelOrientationCodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_ObligationCode_Type">
      <typesafeEnumClass ref="org.isotc211.gmd.MDObligationCodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MD_TopicCategoryCode_Type">
      <typesafeEnumClass ref="org.isotc211.gmd.MDTopicCategoryCodeType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.isotc211.org/2005/gco" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="org.isotc211.gco"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:CodeListValue_Type">
      <class ref="org.isotc211.gco.CodeListValueType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractObject_Type">
      <class ref="org.isotc211.gco.AbstractObjectType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TypeName_Type">
      <class ref="org.isotc211.gco.TypeNameType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MemberName_Type">
      <class ref="org.isotc211.gco.MemberNameType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Multiplicity_Type">
      <class ref="org.isotc211.gco.MultiplicityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MultiplicityRange_Type">
      <class ref="org.isotc211.gco.MultiplicityRangeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnlimitedInteger_Type">
      <class ref="org.isotc211.gco.UnlimitedIntegerType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RecordType_Type">
      <class ref="org.isotc211.gco.RecordTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Binary_Type">
      <class ref="org.isotc211.gco.BinaryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ObjectReference_PropertyType">
      <class ref="org.isotc211.gco.ObjectReferencePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TypeName_PropertyType">
      <class ref="org.isotc211.gco.TypeNamePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MemberName_PropertyType">
      <class ref="org.isotc211.gco.MemberNamePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Multiplicity_PropertyType">
      <class ref="org.isotc211.gco.MultiplicityPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MultiplicityRange_PropertyType">
      <class ref="org.isotc211.gco.MultiplicityRangePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Measure_PropertyType">
      <class ref="org.isotc211.gco.MeasurePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Length_PropertyType">
      <class ref="org.isotc211.gco.LengthPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Angle_PropertyType">
      <class ref="org.isotc211.gco.AnglePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Scale_PropertyType">
      <class ref="org.isotc211.gco.ScalePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Distance_PropertyType">
      <class ref="org.isotc211.gco.DistancePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CharacterString_PropertyType">
      <class ref="org.isotc211.gco.CharacterStringPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Boolean_PropertyType">
      <class ref="org.isotc211.gco.BooleanPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GenericName_PropertyType">
      <class ref="org.isotc211.gco.GenericNamePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LocalName_PropertyType">
      <class ref="org.isotc211.gco.LocalNamePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ScopedName_PropertyType">
      <class ref="org.isotc211.gco.ScopedNamePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UomAngle_PropertyType">
      <class ref="org.isotc211.gco.UomAnglePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UomLength_PropertyType">
      <class ref="org.isotc211.gco.UomLengthPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UomScale_PropertyType">
      <class ref="org.isotc211.gco.UomScalePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnitOfMeasure_PropertyType">
      <class ref="org.isotc211.gco.UnitOfMeasurePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UomArea_PropertyType">
      <class ref="org.isotc211.gco.UomAreaPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UomVelocity_PropertyType">
      <class ref="org.isotc211.gco.UomVelocityPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UomTime_PropertyType">
      <class ref="org.isotc211.gco.UomTimePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UomVolume_PropertyType">
      <class ref="org.isotc211.gco.UomVolumePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DateTime_PropertyType">
      <class ref="org.isotc211.gco.DateTimePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Date_PropertyType">
      <class ref="org.isotc211.gco.DatePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Number_PropertyType">
      <class ref="org.isotc211.gco.NumberPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Decimal_PropertyType">
      <class ref="org.isotc211.gco.DecimalPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Real_PropertyType">
      <class ref="org.isotc211.gco.RealPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Integer_PropertyType">
      <class ref="org.isotc211.gco.IntegerPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnlimitedInteger_PropertyType">
      <class ref="org.isotc211.gco.UnlimitedIntegerPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Record_PropertyType">
      <class ref="org.isotc211.gco.RecordPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RecordType_PropertyType">
      <class ref="org.isotc211.gco.RecordTypePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Binary_PropertyType">
      <class ref="org.isotc211.gco.BinaryPropertyType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.isotc211.org/2005/gss" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="org.isotc211.gss"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:GM_Point_PropertyType">
      <class ref="org.isotc211.gss.GMPointPropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GM_Object_PropertyType">
      <class ref="org.isotc211.gss.GMObjectPropertyType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.isotc211.org/2005/gts" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="org.isotc211.gts"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:TM_Primitive_PropertyType">
      <class ref="org.isotc211.gts.TMPrimitivePropertyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TM_PeriodDuration_PropertyType">
      <class ref="org.isotc211.gts.TMPeriodDurationPropertyType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.isotc211.org/2005/gsr" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="org.isotc211.gsr"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:SC_CRS_PropertyType">
      <class ref="org.isotc211.gsr.SCCRSPropertyType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.aixm.aero/schema/5.1/message" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="aero.aixm.message"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:AIXMBasicMessageType">
      <class ref="aero.aixm.message.AIXMBasicMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BasicMessageMemberAIXMPropertyType">
      <class ref="aero.aixm.message.BasicMessageMemberAIXMPropertyType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://schemas.xmlsoap.org/soap/envelope/" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="org.xmlsoap.schemas.soap.envelope"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:Envelope">
      <class ref="org.xmlsoap.schemas.soap.envelope.Envelope"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Header">
      <class ref="org.xmlsoap.schemas.soap.envelope.Header"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Body">
      <class ref="org.xmlsoap.schemas.soap.envelope.Body"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Fault">
      <class ref="org.xmlsoap.schemas.soap.envelope.Fault"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:detail">
      <class ref="org.xmlsoap.schemas.soap.envelope.Detail"/>
    </bindings>
  </bindings>
</bindings>
